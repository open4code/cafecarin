import streamlit as st
import altair as alt
import pandas as pd
import json

# --- 1. SEITENKONFIGURATION & STYLING ---
# Konfiguriert die Seite und l√§dt das benutzerdefinierte Design
st.set_page_config(
    page_title="Decision Navigator",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# Benutzerdefiniertes CSS f√ºr die Farbpalette und das Design
custom_css = """
<style>
    :root {
        --primary-color: #E2B060;
        --secondary-color: #F8D8C9;
        --background-color: #FFF8E1;
        --text-color: #4A4A4A;
        --container-bg: #FFFFFF;
    }

    body {
        background-color: var(--background-color);
        color: var(--text-color);
    }
    .stApp {
        background-color: var(--background-color);
    }

    /* Styling f√ºr √úberschriften */
    h1, h2, h3, h4, h5, h6 {
        color: var(--primary-color);
    }
    
    /* Styling f√ºr Haupt-Container und Expander */
    .css-1jc7r36, .css-1yjc820 {
        background-color: var(--container-bg) !important;
        border-radius: 15px;
        padding: 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    .st-emotion-cache-1r6y9j9, .st-emotion-cache-1n1p067 {
        background-color: var(--container-bg) !important;
        border-radius: 15px;
        padding: 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    .st-emotion-cache-1jm692n, .st-emotion-cache-1j0r921 {
        background-color: transparent;
        padding: 0;
    }

    /* Styling f√ºr Buttons */
    .st-emotion-cache-1g8w4t4 {
        background-color: var(--primary-color) !important;
        color: white !important;
        border-radius: 10px;
        border: none;
        padding: 10px 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    /* Styling f√ºr Textbereiche und Eingabefelder */
    .st-emotion-cache-13gs647, .st-emotion-cache-1cpx9g8 {
        background-color: var(--secondary-color) !important;
        color: var(--text-color);
        border-radius: 10px;
        border: 1px solid var(--primary-color);
    }

    /* Styling f√ºr Schieberegler (Slider) */
    .stSlider > div > div > div:first-child {
        background-color: var(--primary-color);
    }
    .stSlider > div > div > div > div {
        background-color: var(--primary-color);
    }
    .stSlider > div > div > div {
        background-color: var(--secondary-color);
        border-radius: 5px;
    }
    .stSlider > div > div > div:first-child {
        background-color: var(--primary-color);
    }

    /* Styling f√ºr Checkboxen/Multiselect */
    .st-emotion-cache-1b4z83b, .st-emotion-cache-79elbk {
        color: var(--primary-color);
    }
</style>
"""
st.markdown(custom_css, unsafe_allow_html=True)

# --- 2. ZUSTAND DER APP VERWALTEN (SESSION STATE) ---
# Initialisiert alle Variablen im Session State, wenn sie nicht existieren
def init_session_state():
    if 'page' not in st.session_state:
        st.session_state.page = 'start'
    if 'problem' not in st.session_state: st.session_state.problem = ""
    if 'problem_category' not in st.session_state: st.session_state.problem_category = "W√§hle eine Kategorie"
    if 'options' not in st.session_state: st.session_state.options = ["", ""]
    if 'selected_values' not in st.session_state: st.session_state.selected_values = []
    if 'values_rating' not in st.session_state: st.session_state.values_rating = {}
    if 'emotions' not in st.session_state: st.session_state.emotions = ""
    if 'pro_contra_a' not in st.session_state: st.session_state.pro_contra_a = ""
    if 'pro_contra_b' not in st.session_state: st.session_state.pro_contra_b = ""
    if 'future_scenario_a' not in st.session_state: st.session_state.future_scenario_a = ""
    if 'future_scenario_b' not in st.session_state: st.session_state.future_scenario_b = ""
    if 'first_step' not in st.session_state: st.session_state.first_step = ""
    if 'eisenhower_a' not in st.session_state: st.session_state.eisenhower_a = {'wichtig': False, 'dringend': False}
    if 'eisenhower_b' not in st.session_state: st.session_state.eisenhower_b = {'wichtig': False, 'dringend': False}

init_session_state()

# Funktion, um die Seite zu wechseln
def next_page(page_name):
    st.session_state.page = page_name

# Funktion zum Zur√ºcksetzen des Zustands f√ºr einen Neustart
def reset_app():
    st.session_state.clear()
    init_session_state()
    st.session_state.page = 'start'

# --- 3. DYNAMISCHE INHALTE F√úR JEDE KATEGORIE ---
category_content = {
    "Karriere & Beruf": {
        "values": ["Finanzielle Sicherheit", "Wachstum", "Autonomie", "Einfluss", "Anerkennung", "Work-Life-Balance"],
        "cognitive_biases": {
            "title": "H√§ufige Denkfehler in der Karriere",
            "biases": [
                ("Verlustaversion", "Konzentriere ich mich mehr auf das, was ich im aktuellen Job verlieren k√∂nnte, als auf das, was ich im neuen gewinnen k√∂nnte?"),
                ("Ankereffekt", "H√§nge ich zu sehr am ersten Gehaltsangebot oder einer ersten Bef√∂rderung fest, die ich erhalten habe, und hindert mich das daran, eine bessere Gelegenheit zu erkennen?"),
                ("Best√§tigungsfehler", "Suche ich nur nach Informationen, die meine Entscheidung f√ºr oder gegen einen Job best√§tigen, und ignoriere ich gegenteilige Informationen?")
            ]
        },
    },
    "Pers√∂nliches Wachstum": {
        "values": ["Selbstverwirklichung", "Kreativit√§t", "Lernen", "Soziale Bindungen", "Entwicklung", "Freiheit"],
        "cognitive_biases": {
            "title": "H√§ufige Denkfehler bei pers√∂nlichem Wachstum",
            "biases": [
                ("Status-quo-Verzerrung", "Ziehe ich die einfache Option vor, weil ich Angst vor Ver√§nderungen habe, auch wenn die neue Option mich wachsen l√§sst?"),
                ("Best√§tigungsfehler", "Suche ich nur nach Informationen, die meine √úberzeugung best√§tigen, dass eine neue F√§higkeit zu schwer zu erlernen ist?"),
                ("Verf√ºgbarkeitsheuristik", "St√ºtze ich meine Entscheidung nur auf leicht verf√ºgbare, spektakul√§re Geschichten, statt auf realistischere Fakten?")
            ]
        },
    },
    "Beziehungen & Familie": {
        "values": ["Soziale Bindungen", "Harmonie", "Vertrauen", "Empathie", "Stabilit√§t", "Zugeh√∂rigkeit"],
        "cognitive_biases": {
            "title": "H√§ufige Denkfehler in Beziehungen",
            "biases": [
                ("Rosinenpicken (Cherry Picking)", "Ignoriere ich alle negativen Aspekte und konzentriere ich mich nur auf die guten, um eine schwierige Situation zu vermeiden?"),
                ("Irrglaube an versunkene Kosten (Sunk Cost Fallacy)", "Bleibe ich in einer Beziehung oder Situation, nur weil ich schon so viel Zeit und Energie investiert habe, anstatt nach vorne zu schauen?"),
                ("Best√§tigungsfehler", "H√∂re ich nur auf Freunde, die meine Meinung teilen, und vermeide ich Gespr√§che, die mich herausfordern?")
            ]
        },
    }
}

# --- 4. DIE VERSCHIEDENEN SCHRITTE DER APP RENDERN ---

def render_start_page():
    st.title("Willkommen beim Decision Navigator ‚ú®")
    st.markdown("---")
    st.markdown(
        """
        Hier startest du deine pers√∂nliche Entscheidungsreise.
        Lass uns gemeinsam deine Gedanken und Gef√ºhle strukturieren,
        damit du die beste Entscheidung f√ºr dich treffen kannst.
        """
    )
    st.button("Starte deine Entscheidungsreise", on_click=next_page, args=['step_1'])
    st.image("https://placehold.co/1200x400/FFF8E1/E2B060?text=Ein+interaktives+Tool+f√ºr+Entscheidungen")

def render_step_1():
    st.title("Schritt 1: Dein Problem & deine Optionen")
    st.markdown("---")
    
    st.markdown("### üîç Was ist die Entscheidung, die dich besch√§ftigt?")
    st.session_state.problem = st.text_area(
        "Formuliere deine Frage so klar wie m√∂glich.",
        value=st.session_state.problem,
        key="problem_input"
    )
    
    st.markdown("### üìö W√§hle eine Problemkategorie")
    st.markdown("Die Kategorie hilft uns, die passenden psychologischen Modelle f√ºr deine Situation auszuw√§hlen.")
    st.session_state.problem_category = st.selectbox(
        "Kategorie:",
        options=["W√§hle eine Kategorie"] + list(category_content.keys()),
        index=["W√§hle eine Kategorie"] + list(category_content.keys()).index(st.session_state.problem_category) + 1 if st.session_state.problem_category in category_content else 0
    )

    st.markdown("### ‚û°Ô∏è Nenne deine Optionen")
    st.session_state.options[0] = st.text_input("Option A:", value=st.session_state.options[0], key="option_a_input")
    st.session_state.options[1] = st.text_input("Option B:", value=st.session_state.options[1], key="option_b_input")

    is_valid = all([st.session_state.problem, st.session_state.options[0], st.session_state.options[1], st.session_state.problem_category != "W√§hle eine Kategorie"])
    if st.button("Weiter zur Werte-Analyse", disabled=not is_valid):
        next_page('step_2')
    st.button("Zur√ºck zur Startseite", on_click=reset_app)

def render_step_2():
    st.title("Schritt 2: Werte & Motivation")
    st.markdown("---")
    
    selected_category = st.session_state.problem_category
    all_values = category_content.get(selected_category, {}).get("values", ["Sicherheit", "Freiheit", "Entwicklung"])
    
    st.markdown("### ‚ú® W√§hle deine wichtigsten Werte")
    st.markdown(f"""
    W√§hle die Werte, die f√ºr deine Entscheidung in der Kategorie **"{selected_category}"** relevant sind.
    """)
    
    st.session_state.selected_values = st.multiselect(
        "Deine Top-Werte:",
        options=all_values,
        default=st.session_state.selected_values
    )
    
    if st.session_state.selected_values:
        st.markdown("### ‚öñÔ∏è Bewerte deine Optionen nach diesen Werten")
        st.markdown("Bewerte auf einer Skala von 1 bis 10, wie gut jede Option deine gew√§hlten Werte erf√ºllt.")
        
        for value in st.session_state.selected_values:
            st.subheader(f"Wert: {value}")
            st.session_state.values_rating[f"{value}_A"] = st.slider(
                f"Bewerte {st.session_state.options[0]} nach dem Wert '{value}'",
                0, 10, st.session_state.values_rating.get(f"{value}_A", 5), key=f"slider_a_{value}"
            )
            st.session_state.values_rating[f"{value}_B"] = st.slider(
                f"Bewerte {st.session_state.options[1]} nach dem Wert '{value}'",
                0, 10, st.session_state.values_rating.get(f"{value}_B", 5), key=f"slider_b_{value}"
            )
        
    if st.button("Weiter zur Reflexion"):
        next_page('step_3')
    st.button("Zur√ºck", on_click=next_page, args=['step_1'])

def render_step_3():
    st.title("Schritt 3: Emotionen & Denkfehler")
    st.markdown("---")
    
    st.markdown("### üß† Was sagt dein Bauchgef√ºhl?")
    st.markdown("Schreibe auf, welche Gef√ºhle und intuitiven Gedanken du zu den Optionen hast.")
    st.session_state.emotions = st.text_area(
        "Deine Gedanken und Gef√ºhle:",
        value=st.session_state.emotions
    )
    
    st.markdown("---")
    st.markdown("### ü§î Reflektiere √ºber Denkfehler")
    selected_content = category_content.get(st.session_state.problem_category, {})
    biases = selected_content.get("cognitive_biases", {}).get("biases", [])
    
    for bias_title, bias_question in biases:
        with st.expander(f"**{bias_title}**"):
            st.markdown(bias_question)

    if st.button("Weiter zur Eisenhower-Matrix"):
        next_page('step_4')
    st.button("Zur√ºck", on_click=next_page, args=['step_2'])

def render_step_4():
    st.title("Schritt 4: Die Eisenhower-Matrix")
    st.markdown("---")
    st.markdown("### ‚è∞ Bewerte Dringlichkeit & Wichtigkeit")
    
    st.subheader(f"Option A: {st.session_state.options[0]}")
    st.session_state.eisenhower_a['wichtig'] = st.checkbox("Wichtig", value=st.session_state.eisenhower_a.get('wichtig', False), key="eisenhower_a_wichtig")
    st.session_state.eisenhower_a['dringend'] = st.checkbox("Dringend", value=st.session_state.eisenhower_a.get('dringend', False), key="eisenhower_a_dringend")
    
    st.subheader(f"Option B: {st.session_state.options[1]}")
    st.session_state.eisenhower_b['wichtig'] = st.checkbox("Wichtig", value=st.session_state.eisenhower_b.get('wichtig', False), key="eisenhower_b_wichtig")
    st.session_state.eisenhower_b['dringend'] = st.checkbox("Dringend", value=st.session_state.eisenhower_b.get('dringend', False), key="eisenhower_b_dringend")

    if st.button("Weiter zur Pro & Contra Simulation"):
        next_page('step_5')
    st.button("Zur√ºck", on_click=next_page, args=['step_3'])

def render_step_5():
    st.title("Schritt 5: Pro & Contra und Zukunftsszenario")
    st.markdown("---")
    
    st.markdown(f"### Pro- & Contra-Liste f√ºr '{st.session_state.options[0]}'")
    st.session_state.pro_contra_a = st.text_area(
        "Liste deine Gedanken auf:",
        value=st.session_state.pro_contra_a,
        key="pro_contra_a_area"
    )

    st.markdown(f"### Pro- & Contra-Liste f√ºr '{st.session_state.options[1]}'")
    st.session_state.pro_contra_b = st.text_area(
        "Liste deine Gedanken auf:",
        value=st.session_state.pro_contra_b,
        key="pro_contra_b_area"
    )
    
    st.markdown("### Die 1, 3, 5-Jahres-Simulation")
    st.markdown(f"Stell dir vor, du hast die Entscheidung f√ºr **{st.session_state.options[0]}** getroffen.")
    st.session_state.future_scenario_a = st.text_area(
        "Beschreibe, wie dein Leben in 1, 3 und 5 Jahren aussieht:",
        value=st.session_state.future_scenario_a,
        key="scenario_a"
    )
    
    st.markdown(f"Stell dir nun vor, du hast dich f√ºr **{st.session_state.options[1]}** entschieden.")
    st.session_state.future_scenario_b = st.text_area(
        "Beschreibe, wie dein Leben in 1, 3 und 5 Jahren aussieht:",
        value=st.session_state.future_scenario_b,
        key="scenario_b"
    )

    if st.button("Weiter zur Zusammenfassung"):
        next_page('step_6')
    st.button("Zur√ºck", on_click=next_page, args=['step_4'])

def render_step_6():
    st.markdown("---")
    st.markdown("## üéâ Deine Entscheidungs-Zusammenfassung")
    st.markdown("### üìù √úbersicht deiner Entscheidungsreise")
    st.subheader("Deine Entscheidung:")
    st.info(st.session_state.problem)

    st.subheader("Deine Optionen:")
    st.write(f"**Option A:** {st.session_state.options[0]}")
    st.write(f"**Option B:** {st.session_state.options[1]}")

    if st.session_state.selected_values:
        st.subheader("Deine Werte-Bewertung:")
        data = []
        for value in st.session_state.selected_values:
            data.append({
                "value": value,
                "option": st.session_state.options[0],
                "rating": st.session_state.values_rating.get(f"{value}_A", 0)
            })
            data.append({
                "value": value,
                "option": st.session_state.options[1],
                "rating": st.session_state.values_rating.get(f"{value}_B", 0)
            })
        
        df = pd.DataFrame(data)

        if not df.empty:
            chart = alt.Chart(df).mark_bar().encode(
                x=alt.X('value', title='Werte'),
                y=alt.Y('rating', title='Bewertung (1-10)'),
                color=alt.Color('option', legend=alt.Legend(title="Option")),
                column=alt.Column('option', header=alt.Header(titleOrient="bottom"))
            ).properties(
                title="Werte-Bewertung im Vergleich"
            )
            st.altair_chart(chart, use_container_width=True)

    st.subheader("Deine Gedanken & Szenarien:")
    st.markdown(f"**Pro & Contra f√ºr {st.session_state.options[0]}:**")
    st.write(st.session_state.pro_contra_a)
    st.markdown(f"**Pro & Contra f√ºr {st.session_state.options[1]}:**")
    st.write(st.session_state.pro_contra_b)
    st.markdown(f"**Zukunftsszenario {st.session_state.options[0]}:**")
    st.write(st.session_state.future_scenario_a)
    st.markdown(f"**Zukunftsszenario {st.session_state.options[1]}:**")
    st.write(st.session_state.future_scenario_b)
    
    st.markdown("---")

    st.markdown("### üöÄ Dein erster konkreter Schritt")
    st.markdown("""
    Formuliere einen kleinen, konkreten Schritt, den du sofort umsetzen kannst. Ein guter Ansatz hierf√ºr ist die **SMART-Methode**:
    * **S - Spezifisch:** Was genau m√∂chtest du tun? Wer ist beteiligt? Wo findet es statt?
    * **M - Messbar:** Woran erkennst du, dass du dein Ziel erreicht hast? (Z. B. "Ich habe 3 Angebote eingeholt.")
    * **A - Attraktiv:** Ist der Schritt f√ºr dich motivierend und lohnenswert?
    * **R - Realistisch:** Ist der Schritt machbar und passt er zu deinen Ressourcen (Zeit, Geld, F√§higkeiten)?
    * **T - Terminiert:** Bis wann m√∂chtest du diesen Schritt abgeschlossen haben?
    """)
    st.session_state.first_step = st.text_input(
        "Dein erster konkreter SMART-Schritt:",
        value=st.session_state.first_step
    )
    
    if st.button("Entscheidung abschlie√üen"):
        st.success("üéâ Deine Entscheidungsreise wurde abgeschlossen!")
        
    if st.button("Neue Entscheidungsreise starten", on_click=reset_app):
        pass # Die Funktion reset_app k√ºmmert sich um den Neustart


# --- 5. DIE HAUPTLOGIK DER APP ---
# Die Hauptlogik, die basierend auf dem 'page'-Wert die richtige Funktion aufruft
if st.session_state.page == 'start':
    render_start_page()
elif st.session_state.page == 'step_1':
    render_step_1()
elif st.session_state.page == 'step_2':
    render_step_2()
elif st.session_state.page == 'step_3':
    render_step_3()
elif st.session_state.page == 'step_4':
    render_step_4()
elif st.session_state.page == 'step_5':
    render_step_5()
elif st.session_state.page == 'step_6':
    render_step_6()
