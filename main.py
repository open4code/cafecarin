# Python script for a Streamlit application with three distinct modules.
# Module 1: A \"Decision Journey\" tool that helps analyze pros and cons.
# Module 2: A \"Resilience Reflection\" guide based on user input.
# Module 3: A \"Resilience Path\" with 10-day challenges for different resilience factors.

import streamlit as st
import altair as alt
import pandas as pd
import numpy as np
import json
import requests
import time
import base64
from datetime import datetime, timedelta

# --- 1. SEITENKONFIGURATION & STYLING ---
st.set_page_config(
    page_title="VitaBoost",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# Das CSS wurde komplett neu geschrieben, um das Layout aus dem Bild zu replizieren
custom_css = """
<style>
    /* Allgemeine Farbpalette und Schriftart */
    :root {
        --primary-color: #E2B060;
        --secondary-color: #F8D8C9;
        --background-color: #FFF8E1;
        --text-color: #4A4A4A;
        --container-bg: #FFFFFF;
        --border-radius: 16px;
        --success-color: #4CAF50;
        --trophy-gold: #FFD700;
    }

    body {
        background-color: var(--background-color);
        color: var(--text-color);
        font-family: 'Inter', sans-serif;
    }
    .stApp {
        background-color: var(--background-color);
    }

    /* Styling f√ºr alle Container und Expander (die "Karten") */
    div[data-testid="stVerticalBlock"] > div.st-emotion-cache-1r6y9j9,
    div[data-testid="stVerticalBlock"] > div.st-emotion-cache-1n1p067 {
        background-color: var(--container-bg);
        border-radius: var(--border-radius);
        padding: 20px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        margin-bottom: 20px;
    }
    .st-emotion-cache-1jm692n, .st-emotion-cache-1j0r921 {
        background-color: transparent;
        padding: 0;
    }

    /* Styling f√ºr √úberschriften */
    h1, h2, h3, h4, h5, h6 {
        color: var(--text-color);
        font-weight: 600;
    }
    h1 {
        color: var(--primary-color);
        font-size: 2.5rem;
    }

    /* Styling f√ºr Buttons */
    .stButton > button {
        background-color: var(--primary-color);
        color: white;
        border-radius: 12px;
        border: none;
        padding: 10px 20px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        font-weight: bold;
    }
    .stButton > button:hover {
        background-color: #D4A35B;
    }
    
    .st-emotion-cache-79elbk {
        gap: 20px;
    }

    /* Spezielles Styling f√ºr Textbereiche und Eingabefelder (Farbhintergrund) */
    .st-emotion-cache-13gs647, .st-emotion-cache-1cpx9g8, .st-emotion-cache-13v2p5x, .st-emotion-cache-1l006n6 {
        background-color: var(--secondary-color) !important;
        color: var(--text-color);
        border-radius: 12px;
        border: none;
        padding: 10px;
    }

    /* Styling f√ºr Schieberegler (Slider) */
    .st-emotion-cache-14u43s4 {
        background-color: var(--secondary-color);
        border-radius: 10px;
        height: 10px;
    }
    .st-emotion-cache-14u43s4 > div {
        background-color: var(--primary-color);
    }
    .stSlider > div > div > div:nth-child(2) {
        background-color: var(--secondary-color); /* Slider track */
    }
    .stSlider > div > div > div:nth-child(2) > div:nth-child(1) {
        background-color: var(--primary-color); /* Slider fill */
    }

    /* Trophy Card Styling */
    .trophy-card {
        background: linear-gradient(135deg, var(--trophy-gold) 0%, #FFA500 100%);
        border-radius: 16px;
        padding: 20px;
        text-align: center;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        margin: 10px;
    }
    
    .trophy-icon {
        font-size: 48px;
        margin-bottom: 10px;
    }

    /* Progress Bar Styling */
    .progress-container {
        background-color: var(--secondary-color);
        border-radius: 10px;
        height: 20px;
        overflow: hidden;
        margin: 20px 0;
    }
    
    .progress-bar {
        background: linear-gradient(90deg, var(--primary-color) 0%, var(--success-color) 100%);
        height: 100%;
        transition: width 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: bold;
        font-size: 12px;
    }

    /* Styling f√ºr die untere Navigationsleiste */
    .bottom-nav {
        position: fixed;
        bottom: 0;
        left: 0;
        width: 100%;
        background-color: var(--container-bg);
        box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.05);
        display: flex;
        justify-content: space-around;
        align-items: center;
        padding: 10px 0;
        z-index: 1000;
        border-top-left-radius: var(--border-radius);
        border-top-right-radius: var(--border-radius);
    }
    .nav-item {
        display: flex;
        flex-direction: column;
        align-items: center;
        text-decoration: none;
        color: var(--text-color);
        cursor: pointer;
        font-size: 14px;
        opacity: 0.7;
        transition: opacity 0.3s;
    }
    .nav-item:hover, .nav-item.active {
        opacity: 1;
        color: var(--primary-color);
    }
    .nav-item .icon {
        font-size: 24px;
        margin-bottom: 4px;
    }
    
    /* Expert Tip Box */
    .expert-tip {
        background-color: #E8F5E9;
        border-left: 4px solid var(--success-color);
        border-radius: 8px;
        padding: 15px;
        margin: 15px 0;
    }
</style>
"""
st.markdown(custom_css, unsafe_allow_html=True)


# --- Konfiguration f√ºr LLM API (NICHT √ÑNDERN) ---
# Der API-Schl√ºssel wird von der Laufzeitumgebung bereitgestellt.
API_KEY = ""
# Korrektur der fehlerhaften URL: / vor API_KEY entfernt
API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=" + API_KEY
API_HEADERS = {'Content-Type': 'application/json'}

# --- Helper function for making API calls with exponential backoff ---
def call_llm_api_with_backoff(prompt, max_retries=5, initial_delay=1):
    """
    Calls the LLM API with exponential backoff to handle rate limiting.
    
    Args:
        prompt (str): The text prompt for the LLM.
        max_retries (int): The maximum number of retries.
        initial_delay (int): The initial delay in seconds.
        
    Returns:
        dict: The JSON response from the API or None on failure.
    """
    retries = 0
    while retries < max_retries:
        try:
            payload = {
                "contents": [
                    {
                        "role": "user",
                        "parts": [{"text": prompt}]
                    }
                ]
            }
            response = requests.post(API_URL, headers=API_HEADERS, data=json.dumps(payload))
            response.raise_for_status()  # This will raise an HTTPError for bad responses (4xx or 5xx)
            
            result = response.json()
            if result.get('candidates') and result['candidates'][0].get('content'):
                return result
            else:
                st.error("Error: The LLM response was empty or malformed. Please try again.")
                return None

        except requests.exceptions.HTTPError as err:
            if err.response.status_code == 429:
                delay = initial_delay * (2 ** retries)
                st.warning(f"Rate limit exceeded. Retrying in {delay} seconds...")
                time.sleep(delay)
                retries += 1
            else:
                st.error(f"HTTP Error: {err}")
                return None
        except requests.exceptions.RequestException as err:
            st.error(f"Request Error: {err}")
            return None
    st.error("Maximum retries reached. The API call failed.")
    return None

# --- 2. RESILIENZ-PFAD DATENSTRUKTUR ---
RESILIENCE_PATHS = {
    "Stressabbau": {
        "icon": "üßò",
        "description": "Lerne effektive Techniken zur Stressbew√§ltigung und inneren Ruhe",
        "color": "#4CAF50",
        "expert_tip": "Ein schneller Weg zur Ruhe: Atmen Sie 4 Sekunden lang durch die Nase ein, halten Sie den Atem 7 Sekunden lang an und atmen Sie 8 Sekunden lang durch den Mund aus. Das senkt den Herzschlag und beruhigt sofort.",
        "days": {
            1: {
                "title": "Die 4-7-8 Atemtechnik",
                "exercise": "√úbe die 4-7-8 Atemtechnik f√ºr 5 Minuten. Atme 4 Sekunden ein, halte 7 Sekunden, atme 8 Sekunden aus. Wiederhole dies 5 Mal.",
                "reflection": "Wie f√ºhlst du dich nach der √úbung? Welche Ver√§nderungen bemerkst du in deinem K√∂rper?",
                "motivation": "Du hast den ersten Schritt zu mehr Ruhe gemacht! Jeder Atemzug bringt dich n√§her zu deiner inneren Balance.",
                "points": 10
            },
            2: {
                "title": "K√∂rperwahrnehmung",
                "exercise": "Body Scan: Lege dich hin und scanne deinen K√∂rper von Kopf bis Fu√ü. Wo sitzt die Anspannung? Atme bewusst in diese Bereiche.",
                "reflection": "Welche K√∂rperregionen waren besonders angespannt? Was k√∂nnte der Grund daf√ºr sein?",
                "motivation": "Gro√üartig! Du lernst, die Signale deines K√∂rpers zu verstehen. Das ist der Schl√ºssel zur Stressbew√§ltigung.",
                "points": 10
            },
            3: {
                "title": "Stressausl√∂ser identifizieren",
                "exercise": "Erstelle eine Liste deiner Top 5 Stressausl√∂ser. Was triggert dich am meisten im Alltag?",
                "reflection": "Welcher dieser Ausl√∂ser ist am h√§ufigsten? Was k√∂nntest du √§ndern, um ihn zu vermeiden oder besser damit umzugehen?",
                "motivation": "Bewusstsein ist der erste Schritt zur Ver√§nderung. Du bist auf dem richtigen Weg!",
                "points": 10
            },
            4: {
                "title": "Progressive Muskelentspannung",
                "exercise": "Spanne nacheinander verschiedene Muskelgruppen f√ºr 5 Sekunden an und entspanne sie dann f√ºr 10 Sekunden. Beginne mit den F√º√üen und arbeite dich nach oben.",
                "reflection": "Welche Muskelgruppe fiel dir am schwersten zu entspannen? Warum k√∂nnte das so sein?",
                "motivation": "Dein K√∂rper lernt, zwischen Anspannung und Entspannung zu unterscheiden. Das ist eine wertvolle F√§higkeit!",
                "points": 10
            },
            5: {
                "title": "Natur als Stressabbau",
                "exercise": "Verbringe mindestens 20 Minuten in der Natur. Gehe spazieren oder setze dich einfach nach drau√üen. Nimm bewusst die Umgebung wahr.",
                "reflection": "Wie hat die Natur dein Stresslevel beeinflusst? Was hast du bemerkt?",
                "motivation": "Die Natur ist ein kraftvoller Verb√ºndeter im Kampf gegen Stress. Du hast heute gut f√ºr dich gesorgt!",
                "points": 10
            },
            6: {
                "title": "Stresstagebuch",
                "exercise": "F√ºhre heute ein Stresstagebuch. Notiere jeden stressigen Moment: Was passierte? Wie hast du reagiert? Was h√§ttest du anders machen k√∂nnen?",
                "reflection": "Welche Muster erkennst du in deinen Stressreaktionen?",
                "motivation": "Selbstreflexion ist Gold wert! Du entwickelst ein tiefes Verst√§ndnis f√ºr deine Stressmuster.",
                "points": 10
            },
            7: {
                "title": "Genussmomente schaffen",
                "exercise": "Plane heute bewusst 3 Genussmomente ein. Das kann eine Tasse Tee, ein Lieblingslied oder ein Sonnenuntergang sein. Genie√üe sie vollkommen.",
                "reflection": "Wie schwer oder leicht war es, dir diese Momente zu erlauben? Was hat dich daran gehindert oder unterst√ºtzt?",
                "motivation": "Du lernst, Freude aktiv in deinen Tag zu integrieren. Das ist aktive Stresspr√§vention!",
                "points": 10
            },
            8: {
                "title": "Grenzen setzen",
                "exercise": "Sage heute zu einer Sache 'Nein', die dich √ºberlasten w√ºrde. √úbe, deine Grenzen zu kommunizieren.",
                "reflection": "Wie hat es sich angef√ºhlt, Nein zu sagen? Was hat dich daran gehindert oder best√§rkt? Ratschl√§ge von deinem zuk√ºnftigen Ich an dein heutiges Ich: Was w√ºrdest du dir raten, um deine Grenzen besser zu sch√ºtzen?",
                "motivation": "Grenzen zu setzen ist Selbstf√ºrsorge, keine Schw√§che. Du sch√ºtzt deine Energie!",
                "points": 10
            },
            9: {
                "title": "Bewegung als Ventil",
                "exercise": "Bewege dich heute f√ºr mindestens 30 Minuten. Joggen, Tanzen, Yoga ‚Äì finde, was dir guttut und Stress abbaut.",
                "reflection": "Wie hat sich die Bewegung auf deine Stimmung ausgewirkt? Welche Form der Bewegung hat dir am meisten Freude bereitet? Welche Alternativen gibt es, wenn das Wetter schlecht ist?",
                "motivation": "Bewegung ist Medizin f√ºr K√∂rper und Geist! Du investierst in deine Gesundheit.",
                "points": 10
            },
            10: {
                "title": "Dein pers√∂nlicher Anti-Stress-Plan",
                "exercise": "Erstelle einen pers√∂nlichen Anti-Stress-Notfallplan. Welche 5 Techniken helfen dir am besten? Schreibe sie auf und h√§nge sie sichtbar auf.",
                "reflection": "Was sind deine effektivsten Stress-Tools? Wie kannst du sicherstellen, dass du sie regelm√§√üig anwendest?",
                "motivation": "üéâ Du hast den Stressabbau-Pfad gemeistert! Du besitzt jetzt ein Arsenal an Werkzeugen f√ºr mehr Gelassenheit.",
                "points": 10
            }
        }
    },
    "Selbstwirksamkeit": {
        "icon": "üí™",
        "description": "St√§rke dein Vertrauen in deine eigenen F√§higkeiten",
        "color": "#FF9800",
        "expert_tip": "Das Gehirn lernt durch kleine Siege. Jedes Mal, wenn Sie ein kleines Ziel erreichen ‚Äì sei es nur, ein Glas Wasser zu trinken ‚Äì st√§rken Sie Ihr Vertrauen in Ihre F√§higkeit, Dinge zu bewirken. Nutzen Sie diese kleinen Momente der Best√§tigung.",
        "days": {
            1: {
                "title": "Mikro-Erfolge sammeln",
                "exercise": "Setze dir heute 3 winzige, erreichbare Ziele (z.B. Bett machen, 1 Glas Wasser trinken, 5 Minuten lesen). Hake sie ab!",
                "reflection": "Wie f√ºhlte es sich an, diese kleinen Ziele zu erreichen? Welche Emotion begleitete das Abhaken? Schreibe dir auf, warum du diese Ziele erreichen konntest.",
                "motivation": "Jeder kleine Sieg z√§hlt! Du beweist dir selbst, dass du Dinge bewegen kannst.",
                "points": 10
            },
            2: {
                "title": "Erfolge dokumentieren",
                "exercise": "Erstelle eine 'Erfolgs-Liste'. Schreibe 10 Dinge auf, die du in deinem Leben bereits gemeistert hast ‚Äì gro√ü oder klein. F√ºge hinzu, welche Hindernisse du dabei √ºberwunden hast.",
                "reflection": "Welcher Erfolg macht dich am meisten stolz? Welche St√§rken hast du dabei gezeigt?",
                "motivation": "Du hast bereits so viel erreicht! Diese Liste ist der Beweis deiner F√§higkeiten.",
                "points": 10
            },
            3: {
                "title": "Komfortzone erweitern",
                "exercise": "Tue heute eine Sache, die dich leicht herausfordert, aber machbar ist. Etwas, das du normalerweise vermeidest (z.B. eine Frage in einer Besprechung stellen).",
                "reflection": "Was hast du gew√§hlt? Wie hast du dich vorher und nachher gef√ºhlt?",
                "motivation": "Du w√§chst au√üerhalb deiner Komfortzone! Jeder Schritt macht dich st√§rker.",
                "points": 10
            },
            4: {
                "title": "F√§higkeiten-Inventur",
                "exercise": "Liste 20 F√§higkeiten auf, die du besitzt. Von praktischen (kochen, tippen) bis zu sozialen (zuh√∂ren, empathisch sein). Frage dich: Wie kann ich diese F√§higkeiten nutzen, um ein aktuelles Problem zu l√∂sen?",
                "reflection": "Welche F√§higkeit √ºberrascht dich? Welche m√∂chtest du weiter ausbauen?",
                "motivation": "Du bist voller Talente! Erkenne an, was du alles kannst.",
                "points": 10
            },
            5: {
                "title": "Ein Problem l√∂sen",
                "exercise": "Identifiziere ein kleines Problem in deinem Alltag und l√∂se es heute. Repariere etwas, organisiere etwas oder finde eine L√∂sung.",
                "reflection": "Welches Problem hast du gel√∂st? Wie bist du vorgegangen? Was hast du √ºber deine Probleml√∂sungsf√§higkeiten gelernt?",
                "motivation": "Du bist ein Probleml√∂ser! Jede L√∂sung st√§rkt dein Vertrauen in deine F√§higkeiten.",
                "points": 10
            },
            6: {
                "title": "Feedback einholen",
                "exercise": "Frage 3 Menschen, die dich gut kennen: 'Was ist eine St√§rke, die du an mir siehst?' Notiere ihre Antworten. √úberlege, in welchen Situationen diese St√§rke besonders hilfreich ist.",
                "reflection": "Welche St√§rken wurden genannt? Waren sie dir bewusst? Welche hat dich √ºberrascht? Wie kannst du diese St√§rken bewusster einsetzen?",
                "motivation": "Andere sehen St√§rken in dir, die du vielleicht √ºbersiehst. Du bist wertvoller, als du denkst!",
                "points": 10
            },
            7: {
                "title": "Eine neue F√§higkeit beginnen",
                "exercise": "Beginne heute, eine neue kleine F√§higkeit zu lernen. 15 Minuten reichen ‚Äì ein paar Worte einer Sprache, ein Akkord auf der Gitarre, ein neues Rezept.",
                "reflection": "Was hast du gew√§hlt? Wie f√ºhlte es sich an, Anf√§nger zu sein? Was ist dein n√§chster kleiner Lernschritt f√ºr morgen?",
                "motivation": "Du beweist dir, dass du wachsen und lernen kannst. Das ist pure Selbstwirksamkeit!",
                "points": 10
            },
            8: {
                "title": "R√ºckschl√§ge umdeuten",
                "exercise": "Denke an einen vergangenen 'Misserfolg'. Was hast du daraus gelernt? Wie hat er dich st√§rker gemacht? Ersetze das Wort 'Misserfolg' durch 'Lernchance'.",
                "reflection": "Wie ver√§ndert sich deine Sicht auf den R√ºckschlag, wenn du ihn als Lernchance siehst?",
                "motivation": "R√ºckschl√§ge sind keine Endstation, sondern Umwege zum Erfolg. Du lernst und w√§chst!",
                "points": 10
            },
            9: {
                "title": "Selbstgespr√§ch √ºberpr√ºfen",
                "exercise": "Achte heute auf deine innere Stimme. Jedes Mal, wenn du denkst 'Das kann ich nicht', ersetze es durch 'Ich lerne, wie ich das kann'. Z√§hle, wie oft dir das gelungen ist.",
                "reflection": "Wie oft hast du dich selbst sabotiert? Wie f√ºhlte sich die neue Formulierung an? Welche Situationen machen das positive Selbstgespr√§ch am schwersten?",
                "motivation": "Deine Worte formen deine Realit√§t. Du trainierst dein Gehirn auf Erfolg!",
                "points": 10
            },
            10: {
                "title": "Dein Selbstwirksamkeits-Manifest",
                "exercise": "Schreibe ein pers√∂nliches Manifest: 'Ich bin f√§hig, weil...' Liste alle Beweise deiner Selbstwirksamkeit auf. Lies es laut vor. Nenne mindestens drei zuk√ºnftige Herausforderungen, die du mit deinen aktuellen F√§higkeiten meistern wirst.",
                "reflection": "Wie f√ºhlt es sich an, deine F√§higkeiten laut zu best√§tigen? Was glaubst du jetzt √ºber dich selbst?",
                "motivation": "üéâ Du hast deine Selbstwirksamkeit gest√§rkt! Du wei√üt jetzt: Du kannst mehr, als du denkst.",
                "points": 10
            }
        }
    },
    "Soziale Unterst√ºtzung": {
        "icon": "ü§ù",
        "description": "Baue ein starkes Netzwerk auf und pflege Beziehungen",
        "color": "#2196F3",
        "expert_tip": "Soziale Resilienz bedeutet, sich aktiv um Beziehungen zu k√ºmmern. Rufen Sie heute jemanden an, den Sie lange nicht gesprochen haben. 15 Minuten bewusste Verbindung k√∂nnen Ihre Resilienz mehr st√§rken als eine Stunde Training.",
        "days": {
            1: {
                "title": "Drei Dankbarkeitsanrufe",
                "exercise": "Sende heute 3 kurzen Textnachrichten an verschiedene Menschen, um dich f√ºr etwas Konkretes zu bedanken, das sie f√ºr dich getan haben.",
                "reflection": "Wie hat sich das Senden der Nachrichten angef√ºhlt? Welche Reaktionen hast du erhalten?",
                "motivation": "Du investierst in die wichtigsten Anker deines Lebens ‚Äì deine Beziehungen.",
                "points": 10
            },
            2: {
                "title": "Verbindungs-Inventur",
                "exercise": "Erstelle eine Liste der 5 wichtigsten Menschen in deinem Leben. Schreibe jeweils auf, welche Art von Unterst√ºtzung sie dir geben (emotional, praktisch, intellektuell).",
                "reflection": "Gibt es ein Ungleichgewicht in deiner Unterst√ºtzungsstruktur? Wer braucht heute deine Aufmerksamkeit?",
                "motivation": "Bewusstsein √ºber dein Netzwerk ist der erste Schritt zur St√§rkung der sozialen Resilienz.",
                "points": 10
            },
            3: {
                "title": "Aktives Zuh√∂ren √ºben",
                "exercise": "F√ºhre heute ein 10-min√ºtiges Gespr√§ch, in dem du 100% aktiv zuh√∂rst. Keine Ratschl√§ge geben, nur Paraphrasieren ('Ich verstehe, du f√ºhlst dich...') und Fragen stellen.",
                "reflection": "Wie schwer war es, keine Ratschl√§ge zu geben? Was hast du durch das aktive Zuh√∂ren Neues erfahren?",
                "motivation": "Aktives Zuh√∂ren ist der Schl√ºssel zu tieferen, resilienteren Beziehungen.",
                "points": 10
            },
            4: {
                "title": "Gemeinschaft erleben",
                "exercise": "Nimm an einer gemeinschaftlichen Aktivit√§t teil, auch wenn es nur kurz ist (z.B. ein kurzes Gespr√§ch mit einem Nachbarn, ein Kommentar in einem Online-Forum, ein L√§cheln beim B√§cker).",
                "reflection": "Wie hat sich die Interaktion angef√ºhlt? Hast du dich dadurch mehr verbunden gef√ºhlt?",
                "motivation": "Kleine Momente der Verbundenheit summieren sich zu einer starken sozialen Resilienz.",
                "points": 10
            },
            5: {
                "title": "Um Hilfe bitten",
                "exercise": "Bitte heute um eine kleine Gef√§lligkeit oder um Hilfe bei einer Aufgabe, die du auch allein erledigen k√∂nntest (z.B. jemanden fragen, ob er dir die T√ºr aufh√§lt). √úbe, empf√§nglich zu sein.",
                "reflection": "Wie hat es sich angef√ºhlt, um Hilfe zu bitten? War es leichter oder schwerer als erwartet?",
                "motivation": "Um Hilfe zu bitten ist ein Zeichen von St√§rke, nicht von Schw√§che. Es st√§rkt die Beziehungen.",
                "points": 10
            },
            6: {
                "title": "Positive Verst√§rkung",
                "exercise": "Gib heute 5 echte Komplimente oder positive R√ºckmeldungen an verschiedene Menschen. Beobachte deren Reaktion.",
                "reflection": "Wie haben die Menschen reagiert? Wie hat sich das Geben von Komplimenten auf deine eigene Stimmung ausgewirkt?",
                "motivation": "Positive Kommunikation n√§hrt dein Netzwerk und st√§rkt deine eigene Resilienz.",
                "points": 10
            },
            7: {
                "title": "Beziehungspflege-Ritual",
                "exercise": "√úberlege dir ein kleines w√∂chentliches Ritual, um eine wichtige Beziehung zu pflegen (z.B. Sonntagsanruf, gemeinsamer Kaffee am Freitag). Plane den ersten Schritt heute.",
                "reflection": "Welches Ritual hast du gew√§hlt? Was macht diese Beziehung so wichtig f√ºr deine Resilienz?",
                "motivation": "Routinen der Verbundenheit bauen einen robusten Schutzschild gegen Einsamkeit.",
                "points": 10
            },
            8: {
                "title": "Konfliktl√∂sung reflektieren",
                "exercise": "Denke an einen Konflikt der letzten Zeit. Was war dein Anteil daran? Wie h√§ttest du durch besseres Zuh√∂ren deeskalieren k√∂nnen?",
                "reflection": "Was hast du √ºber deinen Konfliktstil gelernt? Wie kannst du in Zukunft ruhiger reagieren?",
                "motivation": "Gesunde Konfliktl√∂sung macht Beziehungen tiefer, nicht schw√§cher. Du lernst st√§ndig dazu.",
                "points": 10
            },
            9: {
                "title": "Empathie trainieren",
                "exercise": "Stelle dir heute bei einer Interaktion aktiv die Frage: 'Wie f√ºhlt sich die andere Person gerade und warum?' Versuche, ihre Perspektive einzunehmen.",
                "reflection": "War es einfach, die Perspektive zu wechseln? Wie hat sich dein eigenes Verhalten dadurch ver√§ndert?",
                "motivation": "Empathie ist der Klebstoff der Resilienz. Du baust Br√ºcken zu anderen.",
                "points": 10
            },
            10: {
                "title": "Dein Support-Netzwerk-Plan",
                "exercise": "Erstelle eine Kontaktliste mit Ansprechpartnern f√ºr verschiedene Situationen (z.B. 'Zuh√∂ren bei Kummer', 'Praktische Hilfe', 'Inspiration').",
                "reflection": "Wie f√ºhlt es sich an, diesen Plan zu haben? Worauf kannst du dich im Notfall verlassen?",
                "motivation": "üéâ Du hast deinen sozialen Resilienz-Pfad gemeistert! Dein Netzwerk ist dein Superkraft.",
                "points": 10
            }
        }
    }
}

# --- 3. STREAMLIT APP LOGIK ---

# --- Initialisierung des Session State und Mock-Daten ---
def init_session_state():
    """Initialisiert den Streamlit Session State mit Standardwerten."""
    if 'current_page' not in st.session_state:
        st.session_state.current_page = "home" # home, selection, challenge, summary
    if 'user_id' not in st.session_state:
        st.session_state.user_id = "mock_user_123" # Mock-ID
    if 'user_data' not in st.session_state:
        # Mock-Datenstruktur f√ºr den Benutzer
        st.session_state.user_data = {
            "total_points": 0,
            "current_path": None, # Key aus RESILIENCE_PATHS
            "current_day": 0,    # 1 bis 10
            "completed_paths": [], # Liste der abgeschlossenen Pfade
            "daily_reflections": {} # {path_key: {day_num: reflection_text}}
        }

def save_user_data(data):
    """Speichert Benutzerdaten (hier im Session State)."""
    st.session_state.user_data.update(data)
    
def get_user_data():
    """Gibt die aktuellen Benutzerdaten zur√ºck."""
    return st.session_state.user_data

# --- UI Komponenten und Navigation ---

def render_bottom_nav():
    """Rendert die untere Navigationsleiste."""
    # Definiere die Navigationsziele
    nav_items = [
        {"key": "home", "icon": "üè†", "label": "Start"},
        {"key": "selection", "icon": "‚ú®", "label": "Pfad"},
        {"key": "summary", "icon": "üèÜ", "label": "Bilanz"},
    ]
    
    # Nutze Columns, um die Buttons zu rendern
    cols = st.columns(len(nav_items))
    
    for i, item in enumerate(nav_items):
        with cols[i]:
            is_active = st.session_state.current_page == item['key']
            
            # Button Styling (mit Custom CSS nicht ganz so wichtig, aber f√ºr Klick notwendig)
            button_style = "background-color: var(--primary-color);" if is_active else "background-color: #f0f2f6;"
            label_style = "color: white;" if is_active else "color: var(--text-color);"
            
            if st.button(f"{item['icon']} {item['label']}", key=f"nav_{item['key']}", use_container_width=True):
                st.session_state.current_page = item['key']
                st.rerun()

    # Platzhalter f√ºr die fixe Nav (die CSS-Nav ist nur visuell, Streamlit braucht die Buttons)
    st.markdown("<br><br>", unsafe_allow_html=True) 

def render_progress_bar(current_day, max_days, points):
    """Rendert die Fortschrittsleiste."""
    progress = (current_day / max_days) * 100
    st.markdown(f"""
        <div class='progress-container'>
            <div class='progress-bar' style='width: {progress:.0f}%;'>
                Tag {current_day} / {max_days} | üèÖ {points} Pkt.
            </div>
        </div>
    """, unsafe_allow_html=True)

def render_header(user_data):
    """Rendert den Haupt-Header der App."""
    if user_data['current_path']:
        st.markdown(f"<h1>{RESILIENCE_PATHS[user_data['current_path']]['icon']} {user_data['current_path']} Pfad</h1>", unsafe_allow_html=True)
    
    col_points, col_paths, col_empty = st.columns([1, 1, 2])
    with col_points:
        st.markdown(f"**Gesamtpunkte:** <span style='color: var(--primary-color); font-size: 1.2em;'>{user_data['total_points']}</span>", unsafe_allow_html=True)
    with col_paths:
        st.markdown(f"**Abgeschlossene Pfade:** <span style='color: var(--success-color); font-size: 1.2em;'>{len(user_data['completed_paths'])}</span>", unsafe_allow_html=True)

    # Rendert nur, wenn ein Pfad aktiv ist
    if user_data['current_path'] and user_data['current_day'] <= len(RESILIENCE_PATHS[user_data['current_path']]['days']):
        max_days = len(RESILIENCE_PATHS[user_data['current_path']]['days'])
        render_progress_bar(user_data['current_day'], max_days, user_data['total_points'])
        st.markdown(f"<div class='expert-tip'><b>üí° Experten-Tipp:</b> {RESILIENCE_PATHS[user_data['current_path']]['expert_tip']}</div>", unsafe_allow_html=True)
    st.divider()

# --- Hauptseiten der App ---

def page_home():
    """Rendert die Homepage (Dashboard)."""
    user_data = get_user_data()
    
    st.markdown("<h1>Willkommen bei VitaBoost!</h1>", unsafe_allow_html=True)
    st.markdown("Ihr pers√∂nlicher Coach f√ºr mentale St√§rke und Resilienz.")

    st.subheader("Ihre aktuelle Resilienz-Reise")
    
    if user_data['current_path']:
        current_path = RESILIENCE_PATHS[user_data['current_path']]
        st.info(f"Sie befinden sich im **{user_data['current_path']}** Pfad ({current_path['icon']}). Tag {user_data['current_day']} von {len(current_path['days'])}.")
        if st.button("Weiter zur heutigen √úbung", key="home_to_challenge"):
            st.session_state.current_page = "challenge"
            st.rerun()
    else:
        st.warning("Sie haben noch keinen Resilienz-Pfad ausgew√§hlt. Starten Sie jetzt Ihre Reise!")
        if st.button("Pfad w√§hlen", key="home_to_selection"):
            st.session_state.current_page = "selection"
            st.rerun()

    # √úbersicht der Pfade
    st.subheader("Alle verf√ºgbaren Pfade")
    cols = st.columns(len(RESILIENCE_PATHS))
    
    for i, (key, path) in enumerate(RESILIENCE_PATHS.items()):
        with cols[i]:
            completed = key in user_data['completed_paths']
            
            st.markdown(f"""
                <div style='
                    background-color: {path['color']}1A; 
                    border: 2px solid {path['color']}; 
                    border-radius: 12px; 
                    padding: 15px; 
                    text-align: center;
                    opacity: {0.5 if completed else 1};
                '>
                    <span style='font-size: 30px;'>{path['icon']}</span>
                    <h4>{key}</h4>
                    <p>{'‚úÖ Abgeschlossen' if completed else path['description']}</p>
                </div>
            """, unsafe_allow_html=True)

def page_path_selection():
    """Rendert die Seite zur Pfadauswahl."""
    user_data = get_user_data()
    st.markdown("<h1>‚ú® Pfad ausw√§hlen</h1>", unsafe_allow_html=True)
    st.markdown("W√§hlen Sie den Bereich, in dem Sie Ihre Resilienz am liebsten st√§rken m√∂chten.")

    # Pfadauswahl-Logik
    for key, path in RESILIENCE_PATHS.items():
        # Zeige den Pfad nur, wenn er noch nicht abgeschlossen wurde oder der aktuelle ist
        if key not in user_data['completed_paths'] or key == user_data['current_path']:
            col1, col2 = st.columns([1, 4])
            
            with col1:
                st.markdown(f"<span style='font-size: 60px;'>{path['icon']}</span>", unsafe_allow_html=True)

            with col2:
                st.subheader(key)
                st.markdown(f"*{path['description']}*")
                
                if key == user_data['current_path']:
                    st.success(f"**Aktiver Pfad:** Tag {user_data['current_day']} von {len(path['days'])}")
                    if st.button(f"Weiter zu Tag {user_data['current_day']}", key=f"continue_{key}"):
                        st.session_state.current_page = "challenge"
                        st.rerun()
                elif key in user_data['completed_paths']:
                    st.markdown(f"**Abgeschlossen** ‚úÖ")
                else:
                    if st.button(f"Diesen Pfad starten ({len(path['days'])} Tage)", key=f"start_{key}"):
                        # Initialisiere die Reflexionen f√ºr diesen Pfad, falls noch nicht geschehen
                        if key not in user_data['daily_reflections']:
                            user_data['daily_reflections'][key] = {}
                            
                        save_user_data({
                            "current_path": key,
                            "current_day": 1,
                            "daily_reflections": user_data['daily_reflections'] # Speichere die aktualisierte Struktur
                        })
                        st.session_state.current_page = "challenge"
                        st.rerun()
            st.divider()

def page_daily_challenge():
    """Rendert die t√§gliche Herausforderung."""
    user_data = get_user_data()
    
    if not user_data['current_path']:
        st.warning("Bitte w√§hlen Sie zuerst einen Pfad.")
        st.session_state.current_page = "selection"
        st.rerun()
        return

    path_key = user_data['current_path']
    day_num = user_data['current_day']
    path_data = RESILIENCE_PATHS[path_key]
    
    if day_num > len(path_data['days']):
        # Pfad abgeschlossen
        st.session_state.current_page = "summary"
        st.rerun()
        return

    challenge = path_data['days'][day_num]
    
    # Header
    render_header(user_data)
    
    st.subheader(f"Tag {day_num}: {challenge['title']}")
    
    st.markdown("---")
    st.markdown(f"### üéØ √úbung")
    st.info(challenge['exercise'])

    st.markdown(f"### üìù Reflexion")
    st.markdown(f"*{challenge['reflection']}*")
    
    # Zustand der Aufgabe pr√ºfen
    reflection_key = f"reflection_{path_key}_{day_num}"
    completed = path_key in user_data['daily_reflections'] and day_num in user_data['daily_reflections'][path_key]

    default_value = user_data['daily_reflections'].get(path_key, {}).get(day_num, "")

    user_reflection = st.text_area(
        "Ihre Gedanken und Erkenntnisse (mind. 50 Zeichen):",
        value=default_value,
        height=150,
        disabled=completed,
        key=reflection_key
    )

    col_btn, col_mot = st.columns([1, 3])

    if col_btn.button("Aufgabe abschliessen und Punkte sammeln", disabled=completed or len(user_reflection) < 50):
        # Aktualisiere die Daten
        new_points = user_data['total_points'] + challenge['points']
        
        # Speichere Reflexion
        if path_key not in user_data['daily_reflections']:
            user_data['daily_reflections'][path_key] = {}
            
        user_data['daily_reflections'][path_key][day_num] = user_reflection

        # Bestimme den n√§chsten Tag oder schlie√üe den Pfad ab
        next_day = day_num + 1
        new_path = path_key
        
        if next_day > len(path_data['days']):
            # Pfad abgeschlossen
            new_path = None
            user_data['completed_paths'].append(path_key)
            st.session_state.current_page = "summary"
            st.balloons()
            st.success(f"üéâ Pfad '{path_key}' erfolgreich abgeschlossen! Sie haben {challenge['points']} Punkte gesammelt.")
            next_day = 0
        else:
            st.success(f"Gut gemacht! Du hast {challenge['points']} Punkte gesammelt. Bereit f√ºr Tag {next_day}!")
        
        save_user_data({
            "total_points": new_points,
            "current_day": next_day,
            "current_path": new_path,
        })
        st.rerun()

    with col_mot:
        if completed:
             st.info(f"**Motivation f√ºr morgen:** {challenge['motivation']}")
        elif len(user_reflection) < 50:
            st.error(f"Bitte schreiben Sie mindestens {50 - len(user_reflection)} Zeichen, um die Reflexion abzuschlie√üen.")
        else:
            st.markdown(f"<div style='margin-top: 10px; padding: 10px; background-color: var(--secondary-color); border-radius: 8px;'>{challenge['motivation']}</div>", unsafe_allow_html=True)


def page_summary():
    """Rendert die Bilanz- und Troph√§en-Seite."""
    user_data = get_user_data()
    st.markdown("<h1>üèÜ Ihre Resilienz-Bilanz</h1>", unsafe_allow_html=True)
    
    col_p, col_c = st.columns(2)
    with col_p:
        st.markdown(f"<h2>Gesamtpunkte: <span style='color: var(--primary-color);'>{user_data['total_points']}</span></h2>", unsafe_allow_html=True)
    with col_c:
        st.markdown(f"<h2>Abgeschlossene Pfade: <span style='color: var(--success-color);'>{len(user_data['completed_paths'])}</span></h2>", unsafe_allow_html=True)

    st.markdown("---")
    
    st.subheader("Ihre Troph√§en")
    
    if user_data['completed_paths']:
        trophy_cols = st.columns(len(user_data['completed_paths']))
        
        for i, path_key in enumerate(user_data['completed_paths']):
            path = RESILIENCE_PATHS[path_key]
            with trophy_cols[i]:
                st.markdown(f"""
                    <div class='trophy-card'>
                        <span class='trophy-icon'>{path['icon']}</span>
                        <h4>{path_key}-Meister</h4>
                        <p>10-Tages-Pfad abgeschlossen</p>
                    </div>
                """, unsafe_allow_html=True)
    else:
        st.info("Noch keine Pfade abgeschlossen. Zeit, Ihre erste Troph√§e zu verdienen!")

    st.subheader("Pers√∂nliche R√ºckschau")
    st.markdown("Werfen Sie einen Blick auf Ihre gesammelten Erkenntnisse.")
    
    # Anzeige der Reflexionen
    if user_data['daily_reflections']:
        for path_key in user_data['daily_reflections'].keys():
            path_reflections = user_data['daily_reflections'].get(path_key, {})
            
            with st.expander(f"Reflexionen: {RESILIENCE_PATHS[path_key]['icon']} {path_key}"):
                if path_reflections:
                    for day_num in sorted(path_reflections.keys()):
                        day_num = int(day_num) # Stelle sicher, dass es ein Int ist
                        challenge_title = RESILIENCE_PATHS[path_key]['days'][day_num]['title']
                        st.markdown(f"**Tag {day_num} ‚Äì {challenge_title}**")
                        st.write(path_reflections[day_num])
                        st.markdown("---")
                else:
                    st.markdown("Noch keine abgeschlossenen Reflexionen in diesem Pfad.")
    else:
        st.info("Ihre Reflexionen werden hier angezeigt, sobald Sie Aufgaben abschlie√üen.")
                
# --- Hauptfunktion der App ---

def main():
    """Die Hauptfunktion, die die Streamlit-App ausf√ºhrt."""
    init_session_state()
    
    # Mapping der Seiten
    pages = {
        "home": page_home,
        "selection": page_path_selection,
        "challenge": page_daily_challenge,
        "summary": page_summary
    }

    # Rendern der aktuellen Seite
    pages.get(st.session_state.current_page, page_home)()

    # Rendern der Navigationsleiste
    render_bottom_nav()
/**
 * Konfigurationsdaten f√ºr die 10-Tage-Challenge zur pers√∂nlichen Entwicklung.
 * Die Struktur erm√∂glicht eine einfache Iteration durch die Kategorien und Tage.
 */
const CHALLENGE_DATA = {
    "Selbstbild st√§rken": {
        "icon": "üåü",
        "description": "Entwickle ein positives und realistisches Selbstbild durch gezielte √úbungen zur Selbstreflexion und √úberwindung des inneren Kritikers.",
        "color": "#9C27B0", // Lila
        "expert_tip": "Negative Gedanken wie 'Das kann ich nicht' sind nur Gewohnheiten. Fragen Sie sich: 'Was ist das Gegenteil dieses Gedankens?' Ersetzen Sie ihn durch eine neutrale oder positive Alternative, wie 'Ich lerne und werde besser.'",
        "days": {
            1: {
                "title": "Selbstbild-Check",
                "exercise": "Schreibe 10 Adjektive auf, die beschreiben, wie du dich selbst siehst. Sei ehrlich, sowohl positiv als auch negativ.",
                "reflection": "√úberwiegen positive oder negative Begriffe? Was sagt das √ºber dein Selbstbild aus?",
                "motivation": "Bewusstsein ist der erste Schritt zur Ver√§nderung. Du schaust mutig hin!",
                "points": 10
            },
            2: {
                "title": "Innerer Kritiker vs. innerer Unterst√ºtzer",
                "exercise": "Identifiziere eine Situation, in der dein innerer Kritiker laut war. Was hat er gesagt? Schreibe eine Antwort von deinem inneren Unterst√ºtzer.",
                "reflection": "Wie unterscheidet sich die Perspektive? Welche Stimme f√ºhlte sich wahrer an?",
                "motivation": "Du lernst, deinem inneren Kritiker Paroli zu bieten. Das ist Selbstliebe in Aktion!",
                "points": 10
            },
            3: {
                "title": "St√§rken-Fokus",
                "exercise": "Erstelle eine Liste mit 15 deiner St√§rken. Wenn es schwerf√§llt, frage: 'Was w√ºrden meine Freunde sagen?'",
                "reflection": "Welche St√§rke nutzt du zu wenig? Wie k√∂nntest du sie mehr einsetzen?",
                "motivation": "Du bist voller St√§rken! Sie zu erkennen ist der Grundstein f√ºr ein positives Selbstbild.",
                "points": 10
            },
            4: {
                "title": "Vergleichsfalle vermeiden",
                "exercise": "Beobachte heute, wann du dich mit anderen vergleichst. Halte an und frage: 'Was ist mein eigener Ma√üstab?'",
                "reflection": "Wie oft hast du verglichen? Was l√∂st das in dir aus? Wie f√ºhlte es sich an, eigene Ma√üst√§be zu setzen?",
                "motivation": "Dein einziger Vergleich solltest du gestern sein. Du definierst deinen eigenen Erfolg!",
                "points": 10
            },
            5: {
                "title": "Komplimente annehmen",
                "exercise": "Wenn dir heute jemand ein Kompliment macht, nimm es einfach an mit 'Danke'. Keine Abschw√§chung, keine Rechtfertigung.",
                "reflection": "Wie schwer war es, ein Kompliment anzunehmen? Was hindert dich normalerweise daran?",
                "motivation": "Du verdienst Anerkennung! Komplimente anzunehmen st√§rkt dein Selbstbild.",
                "points": 10
            },
            6: {
                "title": "Selbstmitgef√ºhl √ºben",
                "exercise": "Schreibe einen Brief an dich selbst, so wie du ihn an deinen besten Freund schreiben w√ºrdest, der gerade k√§mpft. Mit Mitgef√ºhl und Verst√§ndnis.",
                "reflection": "Wie hat es sich angef√ºhlt, freundlich zu dir selbst zu sein? Was macht es so schwer oder leicht?",
                "motivation": "Selbstmitgef√ºhl ist keine Schw√§che, sondern die Basis f√ºr echte St√§rke. Du lernst, dein eigener Freund zu sein!",
                "points": 10
            },
            7: {
                "title": "Perfektionismus hinterfragen",
                "exercise": "Identifiziere einen Bereich, in dem du perfekt sein willst. Frage dich: Warum? Was w√ºrde passieren, wenn ich 'gut genug' akzeptiere?",
                "reflection": "Woher kommt dieser Perfektionsdruck? Was k√∂nntest du gewinnen, wenn du ihn losl√§sst?",
                "motivation": "Perfektion ist eine Illusion. Du bist 'gut genug' ‚Äì und das ist mehr als genug!",
                "points": 10
            },
            8: {
                "title": "Deine Werte leben",
                "exercise": "Liste deine Top 5 Werte auf. Reflektiere: Lebe ich nach diesen Werten? Wo stimmen meine Handlungen mit meinen Werten √ºberein?",
                "reflection": "Wo gibt es Diskrepanzen? Was k√∂nntest du √§ndern, um authentischer zu leben?",
                "motivation": "Authentizit√§t st√§rkt dein Selbstbild. Du lernst, dir selbst treu zu sein!",
                "points": 10
            },
            9: {
                "title": "K√∂rperliche Selbstakzeptanz",
                "exercise": "Stelle dich vor den Spiegel. Finde 5 Dinge an deinem K√∂rper, f√ºr die du dankbar bist (z.B. 'Meine Beine tragen mich', 'Meine H√§nde erschaffen').",
                "reflection": "Wie hat diese √úbung deine Beziehung zu deinem K√∂rper ver√§ndert?",
                "motivation": "Dein K√∂rper ist dein Zuhause. Dankbarkeit daf√ºr ist ein Akt der Selbstliebe!",
                "points": 10
            },
            10: {
                "title": "Dein neues Selbstbild",
                "exercise": "Schreibe ein neues, realistisches und liebevolles Selbstbild. Wer bist du wirklich? Nicht zu hart, nicht zu idealisiert ‚Äì einfach wahr.",
                "reflection": "Wie unterscheidet sich dieses Selbstbild von dem zu Beginn? Was hat sich ver√§ndert?",
                "motivation": "üéâ Du hast ein st√§rkeres Selbstbild entwickelt! Du siehst dich jetzt mit freundlicheren Augen.",
                "points": 10
            }
        }
    },
    "Verbundenheit": {
        "icon": "ü§ù",
        "description": "Baue tiefere und bedeutungsvollere Beziehungen auf, indem du lernst, aktiv zuzuh√∂ren, Grenzen zu setzen und Verletzlichkeit zu zeigen.",
        "color": "#2196F3", // Blau
        "expert_tip": "Wahre N√§he entsteht oft erst, wenn wir uns verletzlich zeigen. Das Teilen einer ehrlichen Sorge oder eines kleinen Moments der Unsicherheit ist keine Schw√§che, sondern ein Akt des Vertrauens, der Ihre Beziehungen vertiefen kann.",
        "days": {
            1: {
                "title": "Beziehungs-Inventur",
                "exercise": "Liste alle wichtigen Menschen in deinem Leben auf. Bewerte auf einer Skala von 1-10, wie nah du dich ihnen f√ºhlst.",
                "reflection": "Welche Beziehungen sind erf√ºllend? Welche m√∂chtest du vertiefen? Welche kosten dich mehr Energie, als sie geben?",
                "motivation": "Du schaust bewusst auf deine Beziehungen. Das ist der erste Schritt zu mehr Verbundenheit!",
                "points": 10
            },
            2: {
                "title": "Aktives Zuh√∂ren",
                "exercise": "F√ºhre heute ein Gespr√§ch, in dem du nur zuh√∂rst. Keine Ratschl√§ge, keine Unterbrechungen ‚Äì nur volle Aufmerksamkeit.",
                "reflection": "Wie schwer war es, nur zuzuh√∂ren? Was hast du √ºber die Person gelernt?",
                "motivation": "Zuh√∂ren ist ein Geschenk. Du schenkst heute jemandem deine volle Pr√§senz!",
                "points": 10
            },
            3: {
                "title": "Verletzlichkeit zeigen",
                "exercise": "Teile heute mit einer Person, der du vertraust, eine kleine Sorge oder Unsicherheit. Nichts Dramatisches, nur ehrlich.",
                "reflection": "Wie f√ºhlte es sich an, dich verletzlich zu zeigen? Wie hat die Person reagiert?",
                "motivation": "Verletzlichkeit ist Mut, nicht Schw√§che. Du baust echte N√§he auf!",
                "points": 10
            },
            4: {
                "title": "Dankbarkeit ausdr√ºcken",
                "exercise": "Schreibe oder sage 3 Menschen, wof√ºr du ihnen dankbar bist. Sei spezifisch: 'Danke, dass du...' ",
                "reflection": "Wie haben die Menschen reagiert? Wie hat es sich f√ºr dich angef√ºhlt, Dankbarkeit auszudr√ºcken?",
                "motivation": "Dankbarkeit vertieft Beziehungen. Du investierst in deine Verbindungen!",
                "points": 10
            },
            5: {
                "title": "Quality Time planen",
                "exercise": "Plane ein bewusstes Treffen mit einer Person, die dir wichtig ist. Keine Ablenkung, keine Smartphones ‚Äì nur ihr beide.",
                "reflection": "Wie unterschied sich dieses Treffen von euren √ºblichen Interaktionen? Was hat es mit eurer Verbindung gemacht?",
                "motivation": "Qualit√§t schl√§gt Quantit√§t. Du n√§hrst eine wichtige Beziehung!",
                "points": 10
            },
            6: {
                "title": "Grenzen kommunizieren",
                "exercise": "Identifiziere eine Grenze in einer Beziehung, die du setzen m√∂chtest. Kommuniziere sie klar und liebevoll.",
                "reflection": "Wie hat die Person reagiert? Wie f√ºhlst du dich nach dem Setzen der Grenze?",
                "motivation": "Grenzen sind gesund und notwendig. Du sch√ºtzt deine Beziehungen, indem du sie setzt!",
                "points": 10
            },
            7: {
                "title": "Empathie √ºben",
                "exercise": "Wenn heute jemand etwas sagt oder tut, das dich irritiert, pausiere. Frage dich: 'Was k√∂nnte diese Person gerade durchmachen?'",
                "reflection": "Hat diese Perspektive deine Reaktion ver√§ndert? Wie hat sich Empathie angef√ºhlt?",
                "motivation": "Empathie ist die Br√ºcke zu echter Verbundenheit. Du √ºbst, die Welt durch andere Augen zu sehen!",
                "points": 10
            },
            8: {
                "title": "Alte Verbindungen wiederbeleben",
                "exercise": "Kontaktiere heute eine Person, mit der du den Kontakt verloren hast, aber die dir wichtig war. Ein einfaches 'Hey, ich habe an dich gedacht'.",
                "reflection": "Wie hat es sich angef√ºhlt, den Kontakt wiederherzustellen? Wie hat die Person reagiert?",
                "motivation": "Verbindungen k√∂nnen wiederbelebt werden. Du zeigst, dass dir Menschen wichtig sind!",
                "points": 10
            },
            9: {
                "title": "Konflikt konstruktiv angehen",
                "exercise": "Gibt es einen ungel√∂sten Konflikt in deinem Leben? √úberlege, wie du ihn ansprechen k√∂nntest ‚Äì mit Ich-Botschaften und dem Wunsch nach L√∂sung.",
                "reflection": "Was h√§lt dich davon ab, den Konflikt anzusprechen? Was w√§re das Beste, das passieren k√∂nnte?",
                "motivation": "Konflikte anzugehen ist ein Zeichen von Reife. Du investierst in gesunde Beziehungen!",
                "points": 10
            },
            10: {
                "title": "Dein Beziehungs-Manifest",
                "exercise": "Schreibe auf, was dir in Beziehungen wichtig ist. Was brauchst du? Was kannst du geben? Wie willst du in Beziehungen sein?",
                "reflection": "Wie klar sind dir deine Beziehungswerte jetzt? Was wirst du anders machen?",
                "motivation": "üéâ Du hast Verbundenheit vertieft! Du wei√üt jetzt, wie du echte N√§he aufbaust.",
                "points": 10
            }
        }
    }
};
  "Optimismus": {
        "icon": "‚òÄÔ∏è",
        "description": "Kultiviere eine positive Lebenseinstellung ohne Realit√§tsverlust",
        "color": "#FFEB3B",
        "expert_tip": "Optimismus bedeutet nicht, Probleme zu ignorieren, sondern zu glauben, dass L√∂sungen gefunden werden k√∂nnen. Es ist die √úberzeugung, dass Schwierigkeiten vor√ºbergehend sind und dass Sie die Ressourcen haben, sie zu meistern.",
        "days": {
            "1": {
                "title": "Dankbarkeits-Ritual",
                "exercise": "Schreibe jeden Abend diese Woche 3 Dinge auf, f√ºr die du heute dankbar bist. Auch winzige Dinge z√§hlen.",
                "reflection": "Wie ver√§ndert diese Praxis deinen Blick auf den Tag? Was f√§llt dir auf?",
                "motivation": "Dankbarkeit trainiert dein Gehirn auf Positives. Du legst das Fundament f√ºr Optimismus!",
                "points": 10
            },
            "2": {
                "title": "Positive Umdeutung",
                "exercise": "Denke an eine aktuelle Herausforderung. Finde 3 m√∂gliche positive Aspekte oder Lernchancen darin.",
                "reflection": "Wie ver√§ndert sich deine Emotion zur Herausforderung durch diese Perspektive?",
                "motivation": "Du lernst, in Problemen Chancen zu sehen. Das ist die Essenz von Optimismus!",
                "points": 10
            },
            "3": {
                "title": "Best-Case-Szenario",
                "exercise": "F√ºr eine Situation, vor der du Angst hast, male dir das best-m√∂gliche Szenario aus. Was w√§re, wenn alles gut geht?",
                "reflection": "Wie realistisch ist dieses positive Szenario? Wie f√ºhlt es sich an, es dir vorzustellen?",
                "motivation": "Du gibst deinem Gehirn Erlaubnis, positive Ausg√§nge zu erwarten. Das ist nicht naiv, sondern heilsam!",
                "points": 10
            },
            "4": {
                "title": "Pessimismus-Detektor",
                "exercise": "Achte heute auf pessimistische Gedanken. Jedes Mal, wenn du einen bemerkst, notiere ihn und formuliere eine optimistische Alternative.",
                "reflection": "Wie oft warst du pessimistisch? Was sind deine typischen pessimistischen Muster?",
                "motivation": "Bewusstsein ist Macht. Du durchbrichst negative Denkmuster!",
                "points": 10
            },
            "5": {
                "title": "Inspirierende Geschichten",
                "exercise": "Lies, h√∂re oder schau dir heute eine inspirierende Geschichte von jemandem an, der Schwierigkeiten √ºberwunden hat.",
                "reflection": "Was hat dich an dieser Geschichte ber√ºhrt? Welche Lektion nimmst du mit?",
                "motivation": "Geschichten der Hoffnung n√§hren deinen Optimismus. Du tankst Inspiration!",
                "points": 10
            },
            "6": {
                "title": "Zukunfts-Vision",
                "exercise": "Schreibe einen Brief aus der Zukunft (1 Jahr von jetzt). Beschreibe, wie gut es dir geht und was du alles erreicht hast.",
                "reflection": "Wie f√ºhlte es sich an, diese positive Zukunft zu visualisieren? Was brauchst du, um dahin zu kommen?",
                "motivation": "Du erschaffst eine positive Vision. Dein Gehirn arbeitet jetzt darauf hin!",
                "points": 10
            },
            "7": {
                "title": "Positives Selbstgespr√§ch",
                "exercise": "Heute nur positive Selbstgespr√§che. Ertappst du dich bei Selbstkritik, korrigiere es sofort zu etwas Aufbauendem.",
                "reflection": "Wie oft musstest du korrigieren? Wie hat sich deine Stimmung im Laufe des Tages entwickelt?",
                "motivation": "Deine innere Stimme formt deine Realit√§t. Du w√§hlst jetzt bewusst Optimismus!",
                "points": 10
            },
            "8": {
                "title": "L√§cheln als Werkzeug",
                "exercise": "L√§chle heute bewusst ‚Äì auch ohne Grund. Schau, was es mit dir und deiner Umgebung macht.",
                "reflection": "Wie hat das L√§cheln deine Stimmung beeinflusst? Wie haben andere reagiert?",
                "motivation": "Ein L√§cheln ver√§ndert deine Chemie und die Welt um dich herum. Du verbreitest Positivit√§t!",
                "points": 10
            },
            "9": {
                "title": "Ressourcen-Check",
                "exercise": "Liste alle inneren und √§u√üeren Ressourcen auf, die du hast, um mit Schwierigkeiten umzugehen (F√§higkeiten, Menschen, Erfahrungen).",
                "reflection": "Wie gut ausgestattet bist du wirklich? Ver√§ndert diese Liste dein Selbstvertrauen?",
                "motivation": "Du bist nicht hilflos ‚Äì du hast so viele Ressourcen! Das ist der Grund f√ºr realistischen Optimismus.",
                "points": 10
            },
            "10": {
                "title": "Dein Optimismus-Anker",
                "exercise": "Erstelle einen 'Optimismus-Anker': ein Objekt, Bild oder Zitat, das dich an deine optimistische Grundhaltung erinnert. Platziere es sichtbar.",
                "reflection": "Was hast du gew√§hlt? Warum? Wie wirst du es nutzen, wenn es schwierig wird?",
                "motivation": "üéâ Du hast gelernt, Optimismus zu kultivieren! Du siehst jetzt M√∂glichkeiten, wo andere Hindernisse sehen.",
                "points": 10
            }
        }
    },
    "Konfliktl√∂sung": {
        "icon": "üïäÔ∏è",
        "description": "Entwickle F√§higkeiten f√ºr konstruktive Konfliktbew√§ltigung",
        "color": "#E91E63",
        "expert_tip": "Konflikte sind nicht das Problem ‚Äì wie wir mit ihnen umgehen, entscheidet. Gute Konfliktl√∂sung bedeutet, die Bed√ºrfnisse aller Beteiligten zu h√∂ren und nach L√∂sungen zu suchen, bei denen niemand sein Gesicht verliert.",
        "days": {
            "1": {
                "title": "Konflikt-Muster erkennen",
                "exercise": "Reflektiere √ºber vergangene Konflikte. Wie reagierst du typischerweise? Vermeidung, Angriff, R√ºckzug, Kompromiss?",
                "reflection": "Was ist dein Konflikt-Standard-Modus? Wie gut funktioniert er? Was m√∂chtest du √§ndern?",
                "motivation": "Selbsterkenntnis ist der erste Schritt zu besserer Konfliktl√∂sung. Du schaust mutig hin!",
                "points": 10
            },
            "2": {
                "title": "Ich-Botschaften √ºben",
                "exercise": "√úbe, Ich-Botschaften zu formulieren: 'Ich f√ºhle X, wenn Y passiert, weil Z.' Schreibe 5 Beispiele aus deinem Leben.",
                "reflection": "Wie unterscheiden sich Ich-Botschaften von 'Du'-Vorw√ºrfen? Wie w√ºrde das Konflikte ver√§ndern?",
                "motivation": "Du lernst, deine Bed√ºrfnisse auszudr√ºcken, ohne anzugreifen. Das ist Kommunikations-Gold!",
                "points": 10
            },
            "3": {
                "title": "Perspektivwechsel",
                "exercise": "Denke an einen aktuellen oder vergangenen Konflikt. Schreibe die Situation aus der Perspektive der anderen Person.",
                "reflection": "Was siehst du jetzt, das du vorher nicht gesehen hast? Ver√§ndert das deine Emotion?",
                "motivation": "Empathie ist der Schl√ºssel zur Konfliktl√∂sung. Du √∂ffnest dein Herz f√ºr andere Sichtweisen!",
                "points": 10
            },
            "4": {
                "title": "Pausieren lernen",
                "exercise": "Wenn du heute in eine Konfliktsituation ger√§tst (oder eine simulierst), √ºbe zu pausieren, bevor du reagierst. Tief atmen, z√§hlen, dann antworten.",
                "reflection": "Wie schwer war es zu pausieren? Was ver√§nderte sich durch die Pause?",
                "motivation": "Zwischen Reiz und Reaktion liegt deine Macht. Du lernst, bewusst zu reagieren!",
                "points": 10
            },
            "5": {
                "title": "Aktives Zuh√∂ren im Konflikt",
                "exercise": "√úbe die Technik des 'Spiegelns': 'Wenn ich dich richtig verstehe, sagst du...' Probiere es in einem Gespr√§ch.",
                "reflection": "Wie hat die andere Person reagiert, als du wirklich zugeh√∂rt hast? Was hat es mit dem Konflikt gemacht?",
                "motivation": "Verstanden zu werden ist ein Grundbed√ºrfnis. Du schenkst das heute jemandem!",
                "points": 10
            },
            "6": {
                "title": "Bed√ºrfnisse identifizieren",
                "exercise": "Bei einem Konflikt: Grabe tiefer als die Positionen. Was ist das zugrunde liegende Bed√ºrfnis ‚Äì bei dir und beim anderen?",
                "reflection": "Welches Bed√ºrfnis steht hinter dem Konflikt? Wie k√∂nnte man beide Bed√ºrfnisse erf√ºllen?",
                "motivation": "Hinter jedem Konflikt stehen Bed√ºrfnisse. Du lernst, die Wurzel zu finden!",
                "points": 10
            },
            "7": {
                "title": "Win-Win denken",
                "exercise": "Nimm einen Konflikt und brainstorme 5 m√∂gliche Win-Win-L√∂sungen. Kreativit√§t ist erlaubt!",
                "reflection": "Wie viele L√∂sungen hast du gefunden? Welche ist die beste f√ºr alle Beteiligten?",
                "motivation": "Es gibt fast immer eine L√∂sung, bei der alle gewinnen. Du denkst in M√∂glichkeiten!",
                "points": 10
            },
            "8": {
                "title": "Entschuldigung √ºben",
                "exercise": "Eine echte Entschuldigung hat 3 Teile: 'Es tut mir leid f√ºr X. Ich verstehe, dass es Y verursacht hat. Ich werde Z tun.' Schreibe eine.",
                "reflection": "Wie f√ºhlt es sich an, Verantwortung zu √ºbernehmen? F√ºr was in deinem Leben m√∂chtest du dich entschuldigen?",
                "motivation": "Sich zu entschuldigen ist St√§rke, nicht Schw√§che. Du baust Br√ºcken!",
                "points": 10
            },
            "9": {
                "title": "Grenzen im Konflikt",
                "exercise": "Identifiziere, wann ein Konflikt nicht konstruktiv ist (Respektlosigkeit, Gewalt). √úbe zu sagen: 'Ich m√∂chte das kl√§ren, aber nicht so. Lass uns pausieren.'",
                "reflection": "Wo sind deine Grenzen in Konflikten? Wie kannst du sie sch√ºtzen?",
                "motivation": "Nicht jeder Konflikt kann sofort gel√∂st werden. Du lernst, dich zu sch√ºtzen!",
                "points": 10
            },
            "10": {
                "title": "Dein Konfliktl√∂sungs-Toolkit",
                "exercise": "Erstelle ein pers√∂nliches Toolkit: Welche 5 Strategien helfen dir in Konflikten? Schreibe sie als Notfallplan auf.",
                "reflection": "Was sind deine effektivsten Konfliktl√∂sungs-Tools? Wie wirst du sie nutzen?",
                "motivation": "üéâ Du bist jetzt ein Friedensstifter! Du hast gelernt, Konflikte als Chance f√ºr Wachstum zu sehen.",
                "points": 10
            }
        }
    }
}

# --- 3. ZUSTAND DER APP VERWALTEN (SESSION STATE) ---

def init_session_state():
    """
    Initialisiert alle notwendigen Variablen im Streamlit Session State, 
    sofern sie noch nicht existieren.
    """
    
    # Zentrale Initialisierung der Standardwerte
    # st.session_state.setdefault(key, default_value) setzt den Wert nur, 
    # wenn der Schl√ºssel noch nicht existiert (die App l√§uft nicht neu).
    
    # Allgemeine Anwendungs- und Problem-Analyse-Zust√§nde
    st.session_state.setdefault('page', 'start')
    st.session_state.setdefault('problem', "")
    st.session_state.setdefault('problem_category', "W√§hle eine Kategorie")
    st.session_state.setdefault('options', ["", ""]) # z.B. Option A, Option B
    st.session_state.setdefault('selected_values', [])
    st.session_state.setdefault('values_rating', {})
    st.session_state.setdefault('emotions', "")
    
    # Entscheidungs-Matrix Zust√§nde (Pro/Contra)
    st.session_state.setdefault('pro_a', "")
    st.session_state.setdefault('contra_a', "")
    st.session_state.setdefault('pro_b', "")
    st.session_state.setdefault('contra_b', "")
    st.session_state.setdefault('creative_options', "")
    
    # Zukunfts-Visualisierung und erster Schritt
    st.session_state.setdefault('future_scenario_a', "")
    st.session_state.setdefault('future_scenario_b', "")
    st.session_state.setdefault('first_step', "")
    
    # Resilienz-Test und Analyse-Zust√§nde (alt)
    st.session_state.setdefault('resilience_answers', {})
    st.session_state.setdefault('resilience_score', None)
    st.session_state.setdefault('resilience_analysis', None)
    st.session_state.setdefault('processing_analysis', False)
    
    # Zust√§nde f√ºr die Resilienz-Pfade / 10-Tage-Challenge (neu)
    st.session_state.setdefault('total_points', 0)
    st.session_state.setdefault('current_path', None) # Z.B. "Selbstbild st√§rken"
    st.session_state.setdefault('current_day', 1) # Der aktuelle Tag in diesem Pfad
    st.session_state.setdefault('path_progress', {}) # Speichert den Fortschritt pro Pfad/Tag
    st.session_state.setdefault('completed_paths', []) # Liste der abgeschlossenen Pfade
    st.session_state.setdefault('trophies', [])
    st.session_state.setdefault('day_completed', False) # Flag, ob die heutige √úbung abgeschlossen ist

# Funktion sofort aufrufen, um den Zustand bei App-Start zu initialisieren
init_session_state()

def next_page(page_name):
    """√Ñndert die aktuelle Seite im Session State."""
    st.session_state.page = page_name

def reset_app():
    """L√∂scht den gesamten Zustand und initialisiert ihn neu."""
    st.session_state.clear()
    init_session_state()

# --- 4. DYNAMISCHE INHALTE F√úR JEDE KATEGORIE (DECISION JOURNEY) ---
# Dieses Dictionary enth√§lt die spezifischen Werte und kognitiven Verzerrungen,
# die in den Entscheidungs-Tools f√ºr die jeweilige Problemkategorie verwendet werden.
category_content = {
    "Karriere & Beruf": {
        "values": ["Finanzielle Sicherheit", "Wachstum", "Autonomie", "Einfluss", "Anerkennung", "Work-Life-Balance"],
        "cognitive_biases": {
            "title": "H√§ufige Denkfehler in der Karriere",
            "biases": [
                ("Verlustaversion", "Konzentriere ich mich mehr auf das, was ich im aktuellen Job verlieren k√∂nnte, als auf das, was ich im neuen gewinnen k√∂nnte?"),
                ("Ankereffekt", "H√§nge ich zu sehr am ersten Gehaltsangebot oder einer ersten Bef√∂rderung fest, die ich erhalten habe, und hindert mich das daran, eine bessere Gelegenheit zu erkennen?"),
                ("Best√§tigungsfehler", "Suche ich nur nach Informationen, die meine Entscheidung f√ºr oder gegen einen Job best√§tigen, und ignoriere ich gegenteilige Informationen?")
            ]
        },
    },
    "Pers√∂nliches Wachstum": {
        "values": ["Selbstverwirklichung", "Kreativit√§t", "Lernen", "Soziale Bindungen", "Entwicklung", "Freiheit"],
        "cognitive_biases": {
            "title": "H√§ufige Denkfehler bei pers√∂nlichem Wachstum",
            "biases": [
                ("Status-quo-Verzerrung", "Ziehe ich die einfache Option vor, weil ich Angst vor Ver√§nderungen habe, auch wenn die neue Option mich wachsen l√§sst?"),
                ("Best√§tigungsfehler", "Suche ich nur nach Informationen, die meine √úberzeugung best√§tigen, dass eine neue F√§higkeit zu schwer zu erlernen ist?"),
                ("Verf√ºgbarkeitsheuristik", "St√ºtze ich meine Entscheidung nur auf leicht verf√ºgbare, spektakul√§re Geschichten, statt auf realistischere Fakten?")
            ]
        },
    },
    "Beziehungen & Familie": {
        "values": ["Soziale Bindungen", "Harmonie", "Vertrauen", "Empathie", "Stabilit√§t", "Zugeh√∂rigkeit"],
        "cognitive_biases": {
            "title": "H√§ufige Denkfehler in Beziehungen",
            "biases": [
                ("Rosinenpicken (Cherry Picking)", "Ignoriere ich alle negativen Aspekte und konzentriere ich mich nur auf die guten, um eine schwierige Situation zu vermeiden?"),
                ("Irrglaube an versunkene Kosten (Sunk Cost Fallacy)", "Bleibe ich in einer Beziehung oder Situation, nur weil ich schon so viel Zeit und Energie investiert habe, anstatt nach vorne zu schauen?"),
                ("Best√§tigungsfehler", "H√∂re ich nur auf Freunde, die meine Meinung teilen, und vermeide ich Gespr√§che, die mich herausfordern?")
            ]
        },
    }
}

# --- FRAGEBOGEN & ANALYSE-LOGIK ---

# Fragen f√ºr den Resilienz-Fragebogen (33 Fragen im Likert-Format)
resilience_questions = [
    "Ich bin mir meiner St√§rken und Schw√§chen bewusst.",
    "Ich kenne meine Emotionen und kann sie benennen.",
    "Ich erkenne, wie meine Gedanken mein Verhalten beeinflussen.",
    "Ich bin √ºberzeugt, dass ich schwierige Situationen meistern kann.",
    "Ich glaube an meine F√§higkeit, Probleme zu l√∂sen.",
    "Ich f√ºhle mich kompetent, um meine Ziele zu erreichen.",
    "Ich habe Menschen, auf die ich mich in Krisen verlassen kann.",
    "Ich suche aktiv den Kontakt zu Freunden und Familie, wenn ich Unterst√ºtzung brauche.",
    "Ich f√ºhle mich in meinen Beziehungen geborgen und angenommen.",
    "Ich kann mit starken Gef√ºhlen wie Wut oder Trauer umgehen, ohne dass sie mich √ºberfordern.",
    "Ich finde gesunde Wege, um mich nach einem stressigen Tag zu entspannen.",
    "Ich erlaube mir, alle meine Gef√ºhle zu sp√ºren, ohne sie zu bewerten.",
    "Ich habe Techniken, um mich in stressigen Momenten zu beruhigen.",
    "Ich kann Priorit√§ten setzen, um Stress zu reduzieren.",
    "Ich wei√ü, wie ich meine Energiereserven wieder aufladen kann.",
    "Ich gehe Problemen aktiv und systematisch an, anstatt sie zu ignorieren.",
    "Ich kann eine Situation aus verschiedenen Perspektiven betrachten, um eine L√∂sung zu finden.",
    "Ich bin kreativ in der Suche nach neuen L√∂sungen.",
    "Ich bin optimistisch, was meine Zukunft angeht.",
    "Ich kann mir positive Entwicklungen f√ºr mein Leben vorstellen.",
    "Ich habe klare Ziele, die mir Orientierung geben.",
    "Ich kann Dinge akzeptieren, die ich nicht √§ndern kann.",
    "Ich vergebe mir selbst f√ºr Fehler, die ich gemacht habe.",
    "Ich nehme Herausforderungen als Teil des Lebens an.",
    "Ich finde meine Handlungen auch in schwierigen Zeiten sinnvoll.",
    "Ich sp√ºre eine Verbindung zu etwas Gr√∂√üerem als mir selbst.",
    "Meine Werte leiten mich durchs Leben.",
    "Ich bin offen f√ºr neue Ideen und unkonventionelle L√∂sungen.",
    "Ich nutze meine Vorstellungskraft, um aus einer schwierigen Situation herauszukommen.",
    "Ich kann mich von starren Denkmustern l√∂sen.",
    "Ich kann auch in schwierigen Situationen noch lachen.",
    "Ich nutze Humor als Ventil, um Anspannung zu l√∂sen.",
    "Ich kann √ºber mich selbst lachen, ohne mich zu verurteilen."
]

# Vorab definierte Analysen basierend auf dem Score
def get_canned_analysis(score, max_score):
    """
    Liefert einen vordefinierten Analysetext basierend auf dem erreichten Resilienz-Score.

    Args:
        score (int): Der vom Nutzer erreichte Resilienz-Score.
        max_score (int): Der maximal m√∂gliche Score.

    Returns:
        str: Der Analysetext f√ºr die entsprechende Resilienz-Stufe.
    """
    if score <= max_score * 0.4:
        return """
**Deine Resilienz: Fundament aufbauen**

Deine aktuelle Punktzahl deutet darauf hin, dass du dich in einigen Bereichen deiner Resilienz noch im Aufbau befindest. Das ist eine wichtige Erkenntnis! Es zeigt, dass du das Potenzial hast, deine Widerstandsf√§higkeit gezielt zu st√§rken und dich besser auf k√ºnftige Herausforderungen vorzubereiten. Die Arbeit an diesen Faktoren kann einen gro√üen Unterschied in deinem Wohlbefinden machen.

**Tipps zur St√§rkung deiner Resilienz:**

1.  **Selbstwahrnehmung & Selbstf√ºrsorge**: Beginne damit, dich selbst besser kennenzulernen. Frage dich, wie du dich f√ºhlst und was du wirklich brauchst. Integriere kleine Rituale in deinen Alltag, die nur dir gewidmet sind, sei es ein 10-min√ºtiger Spaziergang, eine Tasse Tee in Ruhe oder ein hei√ües Bad.
2.  **Soziale Beziehungen aktiv pflegen**: Suche den Kontakt zu Menschen, die dir guttun und denen du vertraust. Ein offenes Gespr√§ch √ºber deine Gef√ºhle kann eine enorme Last von deinen Schultern nehmen.
3.  **Realistische Ziele setzen**: Gro√üe Probleme k√∂nnen √ºberw√§ltigend wirken. Zerlege sie in kleine, √ºberschaubare Schritte. Wenn du zum Beispiel eine neue F√§higkeit lernen willst, fange mit einem 15-min√ºtigen Online-Tutorial an, anstatt direkt einen ganzen Kurs zu planen.
4.  **Umgang mit Gef√ºhlen lernen**: Gef√ºhle sind Wegweiser. Versuche, sie ohne Urteil zu beobachten, anstatt sie zu unterdr√ºcken. Ein Emotionstagebuch kann dir helfen, Muster zu erkennen.
5.  **Perspektivwechsel √ºben**: Wenn eine Situation aussichtslos erscheint, versuche sie aus einem anderen Blickwinkel zu betrachten. Wie w√ºrde ein Freund die Situation sehen? Welche Lektion kannst du daraus lernen?
"""
    elif score <= max_score * 0.7:
        return """
**Deine Resilienz: Solides Fundament**

Deine Punktzahl zeigt, dass du bereits √ºber ein solides Fundament an Resilienz verf√ºgst. Du bist in der Lage, mit Herausforderungen umzugehen und hast bereits einige der wichtigsten Resilienzfaktoren in deinem Leben integriert. Das ist eine gro√üartige Ausgangslage, um deine F√§higkeiten gezielt weiter auszubauen.

**Tipps zur St√§rkung deiner Resilienz:**

1.  **Soziales Netz bewusst st√§rken**: Pflege deine Beziehungen aktiv. Organisiere regelm√§√üige Treffen, sei ein guter Zuh√∂rer und biete deine Hilfe an. Ein starkes soziales Netz ist dein wichtigster Puffer in schwierigen Zeiten.
2.  **Kreative Probleml√∂sung**: Wenn du vor einem Problem stehst, gehe es nicht nur auf dem naheliegendsten Weg an. Brainstorme unkonventionelle L√∂sungen, denke "out of the box". Manchmal liegt die L√∂sung in einer v√∂llig unerwarteten Idee.
3.  **Sinn und Werte vertiefen**: Reflektiere regelm√§√üig dar√ºber, was dir im Leben wirklich wichtig ist. Wenn du deine Handlungen an deinen Werten ausrichtest, gewinnst du an innerer St√§rke und Orientierung. √úberlege, wie du dein Handeln noch besser mit deinen tiefsten √úberzeugungen in Einklang bringen kannst.
4.  **Optimismus kultivieren**: √úbe dich darin, auch in schwierigen Situationen nach den positiven Aspekten zu suchen, ohne die Realit√§t zu leugnen. Welche Lektion kannst du aus dieser Erfahrung lernen? Betrachte Krisen als Wachstumschancen.
5.  **Humor einsetzen**: Nimm das Leben nicht immer zu ernst. Humor ist ein m√§chtiges Werkzeug, um Anspannung zu l√∂sen und eine positive Perspektive zu bewahren. Suche bewusst nach Gelegenheiten zum Lachen, sei es durch Filme, Witze oder einfach das Teilen lustiger Anekdoten.
"""
    else:
        return """
**Deine Resilienz: Hohe Widerstandsf√§higkeit**

Herzlichen Gl√ºckwunsch! Deine hohe Punktzahl zeigt, dass du √ºber eine **starke Resilienz** verf√ºgst. Du bist gut ger√ºstet, um mit R√ºckschl√§gen und Krisen umzugehen und kannst diese sogar als Chance f√ºr Wachstum nutzen. Deine F√§higkeiten in Bereichen wie Selbstwahrnehmung, Probleml√∂sung und sozialen Beziehungen sind gut ausgepr√§gt.

**Tipps zur Aufrechterhaltung und Weiterentwicklung:**

1.  **Mentoring und Wissensaustausch**: Nutze deine St√§rke, um auch anderen zu helfen. Indem du deine Erfahrungen teilst, st√§rkst du nicht nur dein eigenes Fundament, sondern unterst√ºtzt auch dein Umfeld und schaffst ein Netzwerk der gegenseitigen Unterst√ºtzung.
2.  **Aktivit√§t in den Lebensbereichen**: Setze dir bewusst Ziele in Bereichen, die du vielleicht bisher vernachl√§ssigt hast. Ob es darum geht, ein neues Hobby zu beginnen, eine neue Sprache zu lernen oder dich ehrenamtlich zu engagieren ‚Äì du hast die F√§higkeit, dich anzupassen und zu wachsen.
3.  **Lebenssinn vertiefen**: Reflektiere, wie deine t√§glichen Handlungen zu deinem gr√∂√üeren Lebenssinn beitragen. Wenn du eine starke Sinnorientierung hast, kannst du auch die gr√∂√üten St√ºrme √ºberstehen, ohne dein Ziel aus den Augen zu verlieren.
4.  **Kreativit√§t als Lebenshaltung**: Nutze deine Kreativit√§t nicht nur zur Probleml√∂sung, sondern auch als Ausdruck deiner Pers√∂nlichkeit. Malen, schreiben, Musik machen oder einfach nur das Finden unkonventioneller Wege im Alltag k√∂nnen deine innere St√§rke weiter festigen.
5.  **Humor als Resilienzanker**: Integriere Humor bewusst in deinen Alltag. Lache √ºber dich selbst, teile lustige Momente mit anderen und nutze Humor, um Anspannung zu reduzieren. Humor ist eine der st√§rksten Waffen gegen Widrigkeiten.
"""

# --- SIMULIERTE ABH√ÑNGIGKEITEN F√úR DIESEN CODEBLOCK ---
# (In Ihrer vollst√§ndigen App sollten diese aus der State-Management-Datei importiert werden)

# Annahme: st.session_state existiert und ist initialisiert (wie in Datei 1/2)
if 'page' not in st.session_state: st.session_state.page = 'start'
if 'total_points' not in st.session_state: st.session_state.total_points = 0
if 'trophies' not in st.session_state: st.session_state.trophies = []
if 'path_progress' not in st.session_state: st.session_state.path_progress = {}
if 'completed_paths' not in st.session_state: st.session_state.completed_paths = []
if 'current_path' not in st.session_state: st.session_state.current_path = None
if 'current_day' not in st.session_state: st.session_state.current_day = 1
if 'day_completed' not in st.session_state: st.session_state.day_completed = False

def next_page(page_name):
    """Navigations-Funktion, die den Zustand 'page' √§ndert."""
    st.session_state.page = page_name

# Mock-Daten f√ºr Resilienz-Pfade (Muss in der echten App vollst√§ndig definiert sein!)
RESILIENCE_PATHS = {
    "Selbstwahrnehmung st√§rken": {
        "icon": "üß†",
        "description": "Erkenne deine Emotionen und Denkmuster, um souver√§ner zu handeln.",
        "days": {
            1: {"title": "Der innere Kompass", "task": "Notiere 3 Momente heute, in denen du eine starke Emotion gesp√ºrt hast. Welche Gedanken waren damit verbunden?"},
            2: {"title": "Gedankenstopp", "task": "Erkenne einen negativen Gedanken und ersetze ihn durch eine neutrale Beobachtung."},
            10: {"title": "Abschluss-Check", "task": "Wie hat sich dein Gef√ºhl der Selbstwahrnehmung ver√§ndert?"},
        }
    },
    "Optimismus kultivieren": {
        "icon": "‚òÄÔ∏è",
        "description": "Lerne, Herausforderungen als Chancen zu sehen und eine positive Grundhaltung zu entwickeln.",
        "days": {
            1: {"title": "Die Dankbarkeits√ºbung", "task": "Schreibe 5 Dinge auf, f√ºr die du heute dankbar bist."},
            2: {"title": "Worst-Case-Analyse", "task": "Was ist das Schlimmste, was passieren kann? Wie realistisch ist das?"},
            10: {"title": "Abschluss-Check", "task": "F√ºhlst du dich optimistischer? Warum oder warum nicht?"},
        }
    }
}

# --- HILFSFUNKTIONEN F√úR RESILIENZ-PFADE ---

def complete_day():
    """Wird nach Abschluss einer Tagesaufgabe aufgerufen."""
    path_name = st.session_state.current_path
    current_day = st.session_state.current_day
    
    # 1. Fortschritt aktualisieren
    st.session_state.path_progress[path_name] = current_day
    st.session_state.total_points += 10 # Punkte vergeben
    st.session_state.day_completed = True
    
    # 2. Pr√ºfen, ob der Pfad abgeschlossen ist
    if current_day >= 10:
        if path_name not in st.session_state.completed_paths:
            st.session_state.completed_paths.append(path_name)
            
            # Troph√§e hinzuf√ºgen
            trophy_icons = ["‚≠ê", "üèÖ", "üëë", "üöÄ", "üíé"]
            new_trophy = f"{random.choice(trophy_icons)} {path_name} Meister"
            st.session_state.trophies.append(new_trophy)
            st.success(f"üéâ Pfad **{path_name}** abgeschlossen! Du hast die Troph√§e '{new_trophy}' erhalten.")

    # 3. Zum n√§chsten Tag navigieren (oder zur Pfad-Auswahl, wenn fertig)
    if current_day < 10:
        st.session_state.current_day += 1
        st.session_state.day_completed = False
        st.experimental_rerun() # Neu laden, um den neuen Tag anzuzeigen
    else:
        st.session_state.current_path = None
        next_page('resilience_path_selection')


# --- 5. SEITEN-INHALT RENDERN ---

def render_start_page():
    """Startseite mit Auswahl der drei Hauptpfade."""
    st.title("VitaBoost ‚Äì St√§rke deine Entscheidungen")
    
    # Image (mit Platzhalter-URL) und Slogan
    st.image("https://placehold.co/1200x250/FFF8E1/E2B060?text=St%C3%A4rke+deine+Entscheidungen%2C+st%C3%A4rke+dein+Leben", 
             caption="W√§hle den passenden Pfad f√ºr deine Situation.")
    
    st.markdown("---")
    
    # Punktestand anzeigen
    if st.session_state.total_points > 0:
        st.info(f"### üèÜ Deine Gesamtpunkte: **{st.session_state.total_points}**")

    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("### Entscheidungsreise")
        st.markdown("Strukturiere deine Gedanken und Gef√ºhle, um eine **fundierte Entscheidung** zu treffen.")
        st.button("Starte die Entscheidungsreise", on_click=next_page, args=['step_1'], key="start_decision", use_container_width=True)

    with col2:
        st.markdown("### Werte-Reflexion")
        st.markdown("Du steckst gerade in einer Krise? Finde heraus, was deine **zentralen Resilienzfaktoren** sind.")
        st.button("Starte die Werte-Reflexion", on_click=next_page, args=['wert_reflexion'], key="start_reflection", use_container_width=True)
        
    with col3:
        st.markdown("### Resilienz-Pfad")
        st.markdown("St√§rke deine Widerstandsf√§higkeit mit **10-Tages-Challenges** zu verschiedenen Lebensthemen.")
        st.button("Starte den Resilienz-Pfad", on_click=next_page, args=['resilience_path_selection'], key="start_path", use_container_width=True)
        
    st.markdown("---")
    
    # Troph√§en-Galerie Button
    if st.session_state.trophies:
        st.button("üèÜ Meine Troph√§en ansehen", on_click=next_page, args=['trophy_gallery'], key="view_trophies")

# --- RESILIENCE PATH PAGES ---

def render_resilience_path_selection():
    """Seite zur Auswahl des Resilienz-Pfades."""
    st.title("üå± W√§hle deinen Resilienz-Pfad")
    st.markdown("Jeder Pfad enth√§lt eine 10-Tages-Challenge mit t√§glichen √úbungen, Reflexionen und Expertentipps.")
    
    # Punktestand
    st.markdown(f"**Deine Gesamtpunkte:** **{st.session_state.total_points}**")
    st.markdown("---")
    
    paths = list(RESILIENCE_PATHS.keys())
    
    # Pfade in 2 Spalten anzeigen
    for i in range(0, len(paths), 2):
        cols = st.columns(2)
        for j, col in enumerate(cols):
            if i + j < len(paths):
                path_name = paths[i + j]
                path_data = RESILIENCE_PATHS[path_name]
                
                with col:
                    # Verwende st.container() f√ºr bessere optische Abgrenzung
                    with st.container(border=True): 
                        # Icon und Titel
                        st.markdown(f"## {path_data['icon']} {path_name}")
                        st.markdown(path_data['description'])
                        
                        progress = st.session_state.path_progress.get(path_name, 0)
                        
                        # Fortschritt anzeigen
                        if progress > 0:
                            st.progress(progress / 10, text=f"**Fortschritt: {progress}/10 Tage**")
                        
                        # Status
                        if path_name in st.session_state.completed_paths:
                            st.success("‚úÖ Abgeschlossen! Du hast alle Tage gemeistert.")
                        elif progress > 0:
                            st.info(f"üìç In Bearbeitung (Tag {progress} abgeschlossen)")
                        
                        # Button zum Starten/Fortsetzen
                        button_text = "Pfad Fortsetzen" if progress > 0 and progress < 10 else "Pfad Starten (Tag 1)"
                        if path_name in st.session_state.completed_paths:
                            button_text = "Pfad Wiederholen"
                            
                        # Logik f√ºr den Button
                        if st.button(button_text, key=f"path_{path_name}", use_container_width=True):
                            st.session_state.current_path = path_name
                            
                            # Wenn abgeschlossen oder neu starten, beginne bei Tag 1
                            if path_name in st.session_state.completed_paths:
                                st.session_state.current_day = 1
                                st.session_state.path_progress[path_name] = 0
                                st.session_state.completed_paths.remove(path_name) # Entfert, falls wiederholt wird
                            else:
                                # Setze beim n√§chsten Tag fort (progress + 1)
                                st.session_state.current_day = progress + 1 
                                
                            st.session_state.day_completed = False
                            next_page('resilience_path_day')
    
    st.markdown("---")
    st.button("üè† Zur√ºck zur Startseite", on_click=next_page, args=['start'])

def render_resilience_path_day():
    """Seite zur Anzeige der Tagesaufgabe und zum Abschluss."""
    if not st.session_state.current_path:
        next_page('resilience_path_selection')
        return
    
    path_name = st.session_state.current_path
    
    # Pr√ºfen, ob der Pfad in den Mock-Daten existiert
    if path_name not in RESILIENCE_PATHS:
        st.error("Fehler: Resilienz-Pfad nicht gefunden.")
        next_page('resilience_path_selection')
        return

    path_data = RESILIENCE_PATHS[path_name]
    current_day = st.session_state.current_day
    
    # Pr√ºfen, ob der Tag in den Mock-Daten existiert
    if current_day not in path_data['days']:
        # Fallback auf Tag 10, falls die Tagesdaten unvollst√§ndig sind
        day_data = path_data['days'][10] 
        current_day = 10
    else:
        day_data = path_data['days'][current_day]
    
    # Header
    st.title(f"{path_data['icon']} {path_name}")
    st.subheader(f"Tag {current_day}/10: {day_data['title']}")
    
    # Fortschrittsbalken (Verwendung des nativen Streamlit-Balkens)
    # Wenn Tag 1, dann Fortschritt = 0.
    days_completed = st.session_state.path_progress.get(path_name, 0)
    
    if days_completed >= current_day:
        # Dies sollte nicht passieren, wenn die Logik in 'complete_day' korrekt ist.
        # Es bedeutet, der Tag ist schon in der letzten Sitzung abgeschlossen worden.
        st.progress(days_completed / 10, text=f"**Tag {days_completed} von 10 abgeschlossen**")
    else:
        st.progress(days_completed / 10, text=f"**Aktueller Fortschritt: {days_completed}/10 Tage**")


    st.markdown("---")
    
    st.markdown(f"### Deine Aufgabe f√ºr heute:")
    st.info(f"üìù {day_data['task']}")
    
    st.markdown("---")
    
    if st.session_state.day_completed:
        st.success(f"ü•≥ Du hast Tag {current_day} erfolgreich abgeschlossen! Gut gemacht.")
        # Button, um zur n√§chsten Aufgabe zu gehen
        if current_day < 10:
             st.button(f"N√§chste Aufgabe (Tag {current_day + 1})", on_click=complete_day, key="next_day", use_container_width=True)
        else:
             st.button("Pfad abschlie√üen und zur Auswahl zur√ºck", on_click=complete_day, key="finish_path", use_container_width=True)
    else:
        # Eingabefeld zur Best√§tigung/Reflexion
        user_reflection = st.text_area("Schreibe eine kurze Reflexion (optional, aber empfohlen):", key="day_reflection")

        # Button zum Abschluss der Tagesaufgabe
        st.button("‚úÖ Tagesaufgabe abschlie√üen (10 Punkte erhalten)", on_click=complete_day, key="complete_day", use_container_width=True)

    st.markdown("---")
    st.button("Zur√ºck zur Pfadauswahl", on_click=next_page, args=['resilience_path_selection'])

    
   # Mock-Daten f√ºr Category Content (aus Datei 1)
category_content = {
    "Karriere & Beruf": {
        "values": ["Finanzielle Sicherheit", "Wachstum", "Autonomie", "Einfluss", "Anerkennung", "Work-Life-Balance"],
        "cognitive_biases": {"title": "Denkfehler", "biases": [("Bias", "Frage")]},
    },
    "Pers√∂nliches Wachstum": {
        "values": ["Selbstverwirklichung", "Kreativit√§t", "Lernen", "Soziale Bindungen", "Entwicklung", "Freiheit"],
        "cognitive_biases": {"title": "Denkfehler", "biases": [("Bias", "Frage")]},
    },
    "Beziehungen & Familie": {
        "values": ["Soziale Bindungen", "Harmonie", "Vertrauen", "Empathie", "Stabilit√§t", "Zugeh√∂rigkeit"],
        "cognitive_biases": {"title": "Denkfehler", "biases": [("Bias", "Frage")]},
    }
}

# Erweiterte Mock-Daten f√ºr Resilienz-Pfade
RESILIENCE_PATHS = {
    "Selbstwahrnehmung st√§rken": {
        "icon": "üß†",
        "expert_tip": "Beginne jeden Tag mit drei tiefen Atemz√ºgen und benenne, wie du dich *jetzt* f√ºhlst. Nur benennen, nicht bewerten!",
        "description": "Erkenne deine Emotionen und Denkmuster, um souver√§ner zu handeln.",
        "days": {
            1: {"title": "Der innere Kompass", "exercise": "Notiere 3 Momente heute, in denen du eine starke Emotion gesp√ºrt hast.", "reflection": "Welche Gedanken waren mit diesen Emotionen verbunden?", "points": 10, "motivation": "Der Anfang ist gemacht! Du hast den wichtigsten Schritt zur Ver√§nderung getan."},
            2: {"title": "Gedankenstopp", "exercise": "Erkenne einen negativen Gedanken und ersetze ihn durch eine neutrale Beobachtung.", "reflection": "Wie schwer fiel dir der Perspektivwechsel?", "points": 15, "motivation": "Gro√üartig! Du lernst, deine mentale Steuerung zu √ºbernehmen."},
            10: {"title": "Abschluss-Check", "exercise": "Reflektiere deine gr√∂√üten Erkenntnisse aus den letzten 10 Tagen.", "reflection": "Wie hat sich dein Gef√ºhl der Selbstwahrnehmung ver√§ndert?", "points": 30, "motivation": "Geschafft! Du bist mental st√§rker und klarer geworden."},
        }
    },
}

# Navigations- und State-Funktion (aus Datei 2)
def next_page(page_name):
    """Navigations-Funktion, die den Zustand 'page' √§ndert."""
    st.session_state.page = page_name
    st.session_state.day_completed = False

# State-Initialisierung (falls nicht bereits erfolgt)
if 'total_points' not in st.session_state: st.session_state.total_points = 0
if 'trophies' not in st.session_state: st.session_state.trophies = []
if 'path_progress' not in st.session_state: st.session_state.path_progress = {}
if 'completed_paths' not in st.session_state: st.session_state.completed_paths = []
if 'current_path' not in st.session_state: st.session_state.current_path = None
if 'current_day' not in st.session_state: st.session_state.current_day = 1
if 'day_completed' not in st.session_state: st.session_state.day_completed = False

# State f√ºr Entscheidungsreise
if 'problem' not in st.session_state: st.session_state.problem = ""
if 'problem_category' not in st.session_state: st.session_state.problem_category = "W√§hle eine Kategorie"
if 'options' not in st.session_state: st.session_state.options = ["", ""]
if 'selected_values' not in st.session_state: st.session_state.selected_values = []
if 'values_rating' not in st.session_state: st.session_state.values_rating = {}

# --- HILFSFUNKTIONEN F√úR RESILIENZ-PFAD ---

def handle_day_completion(path_name, current_day, path_data):
    """Logik zum Abschlie√üen eines Tages (Punkte, Fortschritt, Troph√§e)."""
    
    day_points = path_data['days'][current_day]['points']
    st.session_state.total_points += day_points
    st.session_state.path_progress[path_name] = current_day
    st.session_state.day_completed = True

    if current_day == 10:
        if path_name not in st.session_state.completed_paths:
            st.session_state.completed_paths.append(path_name)
            
            # Troph√§e hinzuf√ºgen (mit aktuellem Datum)
            st.session_state.trophies.append({
                'path': path_name,
                'icon': path_data['icon'],
                'completed_date': datetime.now().strftime("%d.%m.%Y")
            })
            st.success(f"üéâ Pfad **{path_name}** abgeschlossen! Du hast eine neue Troph√§e erhalten.")
    
    st.rerun()

def handle_next_day(current_day):
    """Logik zum Wechseln zum n√§chsten Tag oder zur Auswahl."""
    if current_day < 10:
        st.session_state.current_day += 1
        st.session_state.day_completed = False
        st.rerun()
    else:
        # Pfad abgeschlossen, zur√ºck zur Auswahl
        st.session_state.current_path = None
        next_page('resilience_path_selection')

# --- 5. SEITEN-INHALT RENDERN (KORRIGIERT & ERWEITERT) ---

# --- A. RESILIENZ-PFAD TAG ANSICHT ---

def render_resilience_path_day():
    """Seite zur Anzeige der Tagesaufgabe, Reflexion und Abschluss."""
    if not st.session_state.current_path or st.session_state.current_path not in RESILIENCE_PATHS:
        next_page('resilience_path_selection')
        return

    path_name = st.session_state.current_path
    path_data = RESILIENCE_PATHS[path_name]
    
    # Stellen Sie sicher, dass current_day im g√ºltigen Bereich ist, auch wenn die Daten unvollst√§ndig sind
    current_day = st.session_state.current_day
    current_day = min(current_day, 10) # Max Tag 10
    
    # Fallback f√ºr Tag-Daten
    day_data = path_data['days'].get(current_day, path_data['days'][1])

    # Header
    st.title(f"{path_data['icon']} {path_name}")
    st.subheader(f"Tag {current_day}/10: {day_data['title']}")

    # Fortschrittsbalken
    days_completed = st.session_state.path_progress.get(path_name, 0)
    progress_display = days_completed / 10 if days_completed >= current_day else (current_day - 1) / 10 
    st.progress(progress_display, text=f"**Aktueller Fortschritt: {days_completed}/10 Tage**")

    st.markdown("---")
    
    # CSS f√ºr Expertentipp (Inline-Styling f√ºr Streamlit)
    st.markdown("""
    <style>
    .expert-tip {
        background-color: #f0f8ff; /* Light blue background */
        border-left: 5px solid #E2B060; /* VitaBoost color border */
        padding: 15px;
        margin-bottom: 20px;
        border-radius: 4px;
        font-size: 16px;
    }
    .expert-tip strong {
        color: #E2B060;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Expertentipp am Anfang (Tag 1)
    if current_day == 1:
        st.markdown(f"""
        <div class="expert-tip">
            <strong>üí° Expertentipp f√ºr diesen Pfad:</strong><br>
            {path_data['expert_tip']}
        </div>
        """, unsafe_allow_html=True)
    
    # Tages√ºbung
    with st.container(border=True):
        st.markdown("#### üìã Deine heutige √úbung")
        st.markdown(day_data['exercise'])
    
    # Reflexionsfragen
    with st.container(border=True):
        st.markdown("#### ü§î Reflexion")
        st.markdown(day_data['reflection'])
        
        # User-Eingabe (unabh√§ngig vom Abschluss-Status)
        reflection_text = st.text_area(
            "Deine Gedanken und Erkenntnisse (optional zur Speicherung):",
            height=150,
            key=f"reflection_{path_name}_{current_day}",
            disabled=st.session_state.day_completed
        )
    
    st.markdown("---")

    # Tag abschlie√üen / Status anzeigen
    if not st.session_state.day_completed:
        # Hier wird die Logik der Funktion handle_day_completion() aufgerufen
        st.button(
            f"‚úÖ Tag {current_day} abschlie√üen ({day_data['points']} Punkte)", 
            key="complete_day_action",
            on_click=handle_day_completion, 
            args=(path_name, current_day, path_data),
            use_container_width=True
        )
    
    # Motivierender Spruch nach Abschluss
    if st.session_state.day_completed:
        st.success("üéâ Tag abgeschlossen! Deine Erkenntnisse wurden gespeichert.")
        
        # Motivations-Banner
        st.markdown(f"""
        <div style="background: linear-gradient(135deg, #E2B060 0%, #FFD700 100%); 
                      border-radius: 12px; padding: 20px; text-align: center; color: white; margin: 20px 0;">
            <h3 style="color: white; margin: 0;">üí´ {day_data['motivation']}</h3>
            <p style="margin-top: 10px; font-size: 18px;"><strong>+{day_data['points']} Punkte!</strong></p>
            <p>Gesamtpunkte: {st.session_state.total_points}</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Navigation
        col1, col2 = st.columns(2)
        with col1:
            button_text = "üèÜ Pfad abgeschlossen!" if current_day == 10 else f"‚û°Ô∏è N√§chster Tag ({current_day + 1})"
            st.button(
                button_text, 
                key="next_or_finish_day",
                on_click=handle_next_day,
                args=(current_day,),
                use_container_width=True
            )
        
        with col2:
            st.button("üè† Zur√ºck zur √úbersicht", on_click=next_page, args=['resilience_path_selection'], key="back_to_paths", use_container_width=True)

# --- B. TROPH√ÑEN-GALERIE ---

def render_trophy_gallery():
    """Zeigt alle gesammelten Troph√§en und Statistiken an."""
    
    # CSS f√ºr die Troph√§en-Karten
    st.markdown("""
    <style>
    .trophy-card {
        background: linear-gradient(145deg, #333 0%, #000 100%);
        border-radius: 15px;
        padding: 20px;
        text-align: center;
        color: white;
        margin-bottom: 20px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        height: 100%;
    }
    .trophy-icon {
        font-size: 40px;
        margin-bottom: 10px;
        filter: drop-shadow(0 0 5px #FFD700);
    }
    </style>
    """, unsafe_allow_html=True)
    
    st.title("üèÜ Deine Troph√§en-Galerie")
    st.markdown(f"### Gesamtpunkte: **{st.session_state.total_points}**")
    
    if not st.session_state.trophies:
        st.info("Du hast noch keine Troph√§en gesammelt. Schlie√üe einen Resilienz-Pfad ab, um deine erste Troph√§e zu erhalten!")
    else:
        st.markdown("---")
        st.markdown("### üéñÔ∏è Abgeschlossene Pfade")
        
        # Troph√§en in Grid anzeigen (max. 3 pro Zeile)
        cols = st.columns(3)
        for idx, trophy in enumerate(st.session_state.trophies):
            with cols[idx % 3]:
                # Sicherstellen, dass trophy ein Dict ist, falls mit der alten Logik ein String gespeichert wurde
                path_name = trophy['path'] if isinstance(trophy, dict) else trophy
                icon = trophy.get('icon', '‚≠ê') if isinstance(trophy, dict) else '‚≠ê'
                completed_date = trophy.get('completed_date', 'Datum unbekannt') if isinstance(trophy, dict) else ''
                
                st.markdown(f"""
                <div class="trophy-card">
                    <div class="trophy-icon">{icon}</div>
                    <h4 style="color: white; margin: 10px 0;">{path_name}</h4>
                    <p style="color: #FFD700; margin: 0; font-weight: bold;">Abgeschlossen am</p>
                    <p style="color: white; margin: 0; font-size: 14px;">{completed_date}</p>
                </div>
                """, unsafe_allow_html=True)
        
        # Statistiken
        st.markdown("---")
        st.markdown("### üìä Deine Statistiken")
        col1, col2, col3 = st.columns(3)
        
        # Anzahl abgeschlossener Pfade
        with col1:
            st.metric("Abgeschlossene Pfade", len(st.session_state.completed_paths))
            
        # Absolvierte Tage
        with col2:
            total_days = sum(st.session_state.path_progress.values())
            st.metric("Absolvierte Tage", total_days)
            
        # Gesammelte Punkte
        with col3:
            st.metric("Gesammelte Punkte", st.session_state.total_points)
    
    st.markdown("---")
    st.button("üè† Zur√ºck zur Startseite", on_click=next_page, args=['start'])

# --- C. ENTSCHEIDUNGSREISE (SCHRITTE) ---

def render_wert_reflexion_page():
    """Dummy-Seite f√ºr Werte-Reflexion (sollte sp√§ter den Fragebogen enthalten)."""
    st.title("Werte-Reflexion & Das gro√üe Bild")
    st.markdown("""
    Dies ist ein Bereich mit Potenzial, um **deine t√§glichen Handlungen mit deinen tiefsten Werten und deinem Lebenssinn in Einklang zu bringen**.
    """)

    st.subheader("Strategien zur Verbesserung:")
    
    st.markdown("""
    **1. Werte identifizieren:**
    Nimm dir Zeit, um zu identifizieren, was dir wirklich wichtig ist. Schreibe deine zentralen Werte auf, wie z.B. Familie, Ehrlichkeit, Kreativit√§t oder Erfolg.
    """)
    
    st.markdown("""
    **2. Zusammenh√§nge verstehen:**
    Wenn du mit einem kleinen Problem konfrontiert bist, versuche, es in einen gr√∂√üeren Kontext zu stellen. Versuche, Verhaltensweisen von Menschen oder Ereignisse aus einem anderen Blickwinkel zu betrachten.
    """)
    
    st.markdown("""
    **3. Sinn finden:**
    Suche nach Wegen, wie du deinen Alltag als sinnvoller empfinden kannst, z.B. indem du deine Arbeit mit deinen pers√∂nlichen Werten verkn√ºpfst.
    """)
    if st.button("Zur√ºck zur Startseite"):
      next_page('start')

def render_step_1():
    """Schritt 1 der Entscheidungsreise: Problem und Optionen definieren."""
    st.title("Step 1: Dein Problem & deine Optionen")
    
    with st.container(border=True):
        st.markdown("#### Problem und Kategorie")
        st.session_state.problem = st.text_area(
            "Was ist die Entscheidung, die dich besch√§ftigt?",
            value=st.session_state.problem,
            key="problem_input",
            height=100
        )
        
        options = ["W√§hle eine Kategorie"] + list(category_content.keys())
        # Index-Verwaltung f√ºr Selectbox
        try:
            current_index = options.index(st.session_state.problem_category)
        except ValueError:
            current_index = 0
            
        st.session_state.problem_category = st.selectbox(
            "W√§hle die Kategorie, zu der deine Entscheidung geh√∂rt:",
            options=options,
            index=current_index
        )
    
    with st.container(border=True):
        st.markdown("#### Optionen")
        col1, col2 = st.columns(2)
        with col1:
            st.session_state.options[0] = st.text_area("Option A (z.B. 'Job wechseln'):", value=st.session_state.options[0], height=100, key="option_a_input")
        with col2:
            st.session_state.options[1] = st.text_area("Option B (z.B. 'Im aktuellen Job bleiben'):", value=st.session_state.options[1], height=100, key="option_b_input")
    
    # Validierung
    is_valid = all([st.session_state.problem, st.session_state.options[0], st.session_state.options[1], st.session_state.problem_category != "W√§hle eine Kategorie"])
    
    st.markdown("---")
    st.button("‚û°Ô∏è Weiter zu Step 2: Werte & Motivation", disabled=not is_valid, on_click=next_page, args=['step_2'], use_container_width=True)
    st.button("üè† Zur√ºck zur Startseite", on_click=next_page, args=['start'])

def render_step_2():
    """Schritt 2 der Entscheidungsreise: Werte-basiertes Rating und erste Berechnung."""
    st.title("Step 2: Werte & Motivation")
    selected_category = st.session_state.problem_category
    
    # Sicherstellen, dass die Kategorie g√ºltig ist, bevor auf values zugegriffen wird
    if selected_category == "W√§hle eine Kategorie":
        st.error("Bitte w√§hle in Step 1 zuerst eine g√ºltige Kategorie aus.")
        st.button("Zur√ºck zu Step 1", on_click=next_page, args=['step_1'])
        return

    all_values = category_content.get(selected_category, {}).get("values", [])
    
    with st.container(border=True):
        st.markdown(f"#### Psychologische Werte f√ºr '{selected_category}'")
        st.markdown(f"W√§hle alle Werte aus, die f√ºr deine Entscheidung relevant sind.")
        
        # Checkboxen in 3 Spalten anzeigen
        current_selected_values = st.session_state.selected_values.copy()
        cols = st.columns(3)
        temp_selected_values = []
        for i, value in enumerate(all_values):
            col = cols[i % 3]
            is_checked = col.checkbox(value, value=value in current_selected_values, key=f"checkbox_{value}")
            if is_checked:
                temp_selected_values.append(value)
        
        st.session_state.selected_values = temp_selected_values

    # Nur fortfahren, wenn Werte ausgew√§hlt sind
    if st.session_state.selected_values:
        total_score_a = 0
        total_score_b = 0

        with st.container(border=True):
            st.markdown("#### Werte-Bewertung (Deine Entscheidungsmatrix)")
            st.markdown("Bewerte auf einer Skala von 0 bis 10, wie gut jede Option deinen gew√§hlten Wert erf√ºllt. **(0=erf√ºllt gar nicht, 10=erf√ºllt perfekt)**.")
            
            for value in st.session_state.selected_values:
                st.subheader(f"‚öñÔ∏è Wert: {value}")
                
                # Option A Slider
                col_a, col_b = st.columns(2)
                with col_a:
                    rating_a = st.slider(
                        f"**Option A ({st.session_state.options[0]}):**",
                        0, 10, st.session_state.values_rating.get(f"{value}_A", 5), key=f"slider_a_{value}"
                    )
                    st.session_state.values_rating[f"{value}_A"] = rating_a
                    total_score_a += rating_a
                
                # Option B Slider
                with col_b:
                    rating_b = st.slider(
                        f"**Option B ({st.session_state.options[1]}):**",
                        0, 10, st.session_state.values_rating.get(f"{value}_B", 5), key=f"slider_b_{value}"
                    )
                    st.session_state.values_rating[f"{value}_B"] = rating_b
                    total_score_b += rating_b
        
        st.markdown("---")
        
        # Berechnung und Darstellung des Zwischenergebnisses
        with st.container():
            st.markdown("### üìä Zwischenergebnis (Werte-Gewichtung)")
            
            max_score = len(st.session_state.selected_values) * 10
            
            col_a, col_b = st.columns(2)
            
            with col_a:
                st.metric(f"Option A: {st.session_state.options[0]}", f"{total_score_a} / {max_score}", delta=f"{round(total_score_a / max_score * 100)} %")
                st.progress(total_score_a / max_score)
                
            with col_b:
                st.metric(f"Option B: {st.session_state.options[1]}", f"{total_score_b} / {max_score}", delta=f"{round(total_score_b / max_score * 100)} %")
                st.progress(total_score_b / max_score)

        st.markdown("---")
        st.button("‚û°Ô∏è Weiter zu Step 3: Kognitive Verzerrungen pr√ºfen", on_click=next_page, args=['step_3'], use_container_width=True)
    else:
        st.warning("Bitte w√§hle mindestens einen relevanten Wert aus, um fortzufahren und die Entscheidungsmatrix zu erstellen.")
    
    st.button("‚¨ÖÔ∏è Zur√ºck zu Step 1", on_click=next_page, args=['step_1'])

# --- MOCK START PAGE F√úR NAVIGATION ---

def render_start_page():
    st.title("VitaBoost ‚Äì St√§rke deine Entscheidungen")
    st.button("Starte die Entscheidungsreise", on_click=next_page, args=['step_1'])
    st.button("Starte den Resilienz-Pfad", on_click=next_page, args=['resilience_path_selection'])
    if st.session_state.trophies:
        st.button("üèÜ Meine Troph√§en ansehen", on_click=next_page, args=['trophy_gallery'])

# --- MAIN RENDERER (NUR ZUM TESTEN) ---

# if st.session_state.page == 'start':
#     render_start_page()
# elif st.session_state.page == 'resilience_path_day':
#     render_resilience_path_day()
# elif st.session_state.page == 'trophy_gallery':
#     render_trophy_gallery()
# elif st.session_state.page == 'step_1':
#     render_step_1()
# elif st.session_state.page == 'step_2':
#     render_step_2()
# else:
#     # Fallback f√ºr die Pfadauswahl
#     pass


   # --- HILFSFUNKTIONEN ---

def next_page(page_name):
    """√Ñndert den aktuellen Seitenstatus in der Session State."""
    st.session_state.page = page_name
    st.rerun()

def reset_app():
    """Setzt alle entscheidungsrelevanten Session States zur√ºck."""
    st.session_state.page = 'start'
    st.session_state.problem = ""
    st.session_state.options = ["Option 1 (z.B. Bleiben)", "Option 2 (z.B. Wechseln)"]
    st.session_state.problem_category = list(category_content.keys())[0]
    st.session_state.selected_values = []
    st.session_state.values_rating = {}
    st.session_state.emotions = ""
    st.session_state.pro_a = ""
    st.session_state.pro_b = ""
    st.session_state.contra_a = ""
    st.session_state.contra_b = ""
    st.session_state.creative_options = ""
    st.session_state.future_scenario_a = ""
    st.session_state.future_scenario_b = ""
    st.session_state.first_step = ""
    st.rerun()

def get_canned_analysis(score, max_score):
    """Liefert eine Analyse basierend auf dem Resilienz-Score."""
    if score >= max_score * 0.8:
        return "### **Hohe Resilienz (Exzellent)**\nDeine Punktzahl deutet auf eine **ausgepr√§gte Widerstandsf√§higkeit** hin. Du verf√ºgst √ºber starke innere Ressourcen, um mit Stress und R√ºckschl√§gen umzugehen. Du bist wahrscheinlich sehr l√∂sungsorientiert und nutzt dein Netzwerk effektiv. Halte diese Praktiken bei!"
    elif score >= max_score * 0.6:
        return "### **Mittlere bis hohe Resilienz (Gut)**\nDu hast eine **gute Basis an Resilienzfaktoren**. In herausfordernden Zeiten zeigst du St√§rke, aber es gibt Bereiche, in denen du noch wachsen kannst. Weiter so!"
    else:
        return "### **Wachstumspotenzial (Fokus auf Entwicklung)**\nDeine Punktzahl deutet darauf hin, dass du m√∂glicherweise **Schwierigkeiten hast**, dich schnell von R√ºckschl√§gen zu erholen. Konzentriere dich auf den Aufbau von Achtsamkeit und die Definition kleiner, erreichbarer Ziele."

def initialize_session_state():
    """Initialisiert alle notwendigen Session State Variablen."""
    defaults = {
        'page': 'start',
        'problem': "",
        'options': ["Option 1 (z.B. Bleiben)", "Option 2 (z.B. Wechseln)"],
        'problem_category': list(category_content.keys())[0],
        'selected_values': [],
        'values_rating': {},
        'emotions': "",
        'pro_a': "",
        'pro_b': "",
        'contra_a': "",
        'contra_b': "",
        'creative_options': "",
        'future_scenario_a': "",
        'future_scenario_b': "",
        'first_step': "",
        'resilience_score': None,
        'resilience_analysis': None,
        'core_values': ["Wachstum", "Sicherheit", "Freiheit", "Familie", "Gesundheit", "Anerkennung", "Geld"],
    }
    for key, default_value in defaults.items():
        if key not in st.session_state:
            st.session_state[key] = default_value
    
    # Spezielle Initialisierung f√ºr Resilienz-Antworten
    if 'resilience_answers' not in st.session_state:
        st.session_state.resilience_answers = {i: 3 for i in range(len(resilience_questions))}


# --- INHALTSDEFINITIONEN ---

category_content = {
    "Karriere & Finanzen": {
        "cognitive_biases": {
            "biases": [
                ("Best√§tigungsfehler (Confirmation Bias)", "Neigst du dazu, nur nach Informationen zu suchen, die deine bevorzugte Option best√§tigen?"),
                ("Verlustaversion (Loss Aversion)", "Ist die Angst, etwas zu verlieren (Job, Status), st√§rker als die Freude, etwas zu gewinnen (neue Chance)?")
            ]
        }
    },
    "Beziehungen & Familie": {
        "cognitive_biases": {
            "biases": [
                ("Ankereffekt (Anchoring)", "Wirst du von deinem ersten emotionalen Eindruck zu stark beeinflusst?"),
                ("Status-quo-Bias", "W√§hlst du die Option, die alles beim Alten l√§sst, nur weil sie bequemer ist?")
            ]
        }
    },
}

resilience_questions = [
    "Ich bin √ºberzeugt, dass ich Herausforderungen meistern kann.",
    "Ich habe starke, unterst√ºtzende Beziehungen in meinem Leben.",
    "Ich kann meine Emotionen auch in stressigen Situationen regulieren.",
    "Ich sehe Misserfolge als Gelegenheiten zum Lernen.",
    "Ich habe klare, realistische Ziele f√ºr meine Zukunft."
]


# --- SEITEN-RENDERER ---

def render_start():
    st.title("Dein Entscheidungshelfer üß≠")
    st.markdown("""
    Willkommen! Dieses Tool f√ºhrt dich durch einen strukturierten Prozess, um schwierige Entscheidungen zu treffen.
    Wir nutzen Methoden wie die **Sechs Denkh√ºte** von Edward de Bono und das **Regret Minimization Framework** von Jeff Bezos.
    
    W√§hle deinen Weg:
    """)

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("1. Entscheidungsreise starten")
        st.markdown("F√ºhre eine strukturierte Analyse deiner aktuellen Situation und Optionen durch.")
        if st.button("‚ñ∂Ô∏è Starte Entscheidung", use_container_width=True):
            next_page('step_1')
    
    with col2:
        st.subheader("2. Resilienz reflektieren")
        st.markdown("Reflektiere deine innere St√§rke und dein Wachstumspotenzial.")
        if st.button("üßò Starte Reflexion", use_container_width=True):
            next_page('resilience_questions')
            
    st.markdown("---")
    st.markdown("Eine klare Entscheidung beginnt mit einem klaren Kopf. Lass uns loslegen!")


def render_step_1():
    st.title("Step 1: Das Problem & Optionen (Der 'Wei√üe Hut')")
    st.markdown("#### Fakten sammeln & Problem definieren")
    
    st.session_state.problem = st.text_area(
        "Beschreibe deine Entscheidungssituation kurz und pr√§zise (z.B. Jobwechsel, Umzug, Beziehungsstatus):", 
        value=st.session_state.problem,
        height=100
    )
    
    st.markdown("#### Definiere deine zwei Hauptoptionen")
    
    col_a, col_b = st.columns(2)
    with col_a:
        st.session_state.options[0] = st.text_input(
            "Option A:",
            value=st.session_state.options[0]
        )
    with col_b:
        st.session_state.options[1] = st.text_input(
            "Option B:",
            value=st.session_state.options[1]
        )
        
    st.markdown("#### W√§hle die Kategorie, die am besten passt")
    st.session_state.problem_category = st.selectbox(
        "Kategorie (hilft bei der Reflexion von Denkfehlern):",
        options=list(category_content.keys()),
        index=list(category_content.keys()).index(st.session_state.problem_category) if st.session_state.problem_category in category_content else 0
    )

    problem_defined = bool(st.session_state.problem.strip())
    option_a_defined = bool(st.session_state.options[0].strip())
    option_b_defined = bool(st.session_state.options[1].strip())
    
    st.markdown("---")
    if st.button("Weiter"):
        if not (problem_defined and option_a_defined and option_b_defined):
            st.warning("Bitte beschreibe das Problem und beide Optionen, bevor du fortf√§hrst.")
        else:
            next_page('step_2')


def render_step_2():
    st.title("Step 2: Werte-Matrix (Der 'Wei√üe Hut' & 'Blaue Hut')")
    st.markdown("""
    #### Werte ausw√§hlen
    W√§hle die **drei bis f√ºnf wichtigsten Werte** aus, die von dieser Entscheidung am st√§rksten betroffen sind.
    """)

    st.session_state.selected_values = st.multiselect(
        "Deine Kernwerte:",
        options=st.session_state.core_values,
        default=st.session_state.selected_values,
        max_selections=5
    )

    st.markdown("#### Werte bewerten (Skala 1 - 10)")
    st.markdown(f"Bewerte, wie gut **Option A ({st.session_state.options[0]})** und **Option B ({st.session_state.options[1]})** mit jedem deiner ausgew√§hlten Werte √ºbereinstimmen.")
    st.markdown("_1 = gar nicht kompatibel, 10 = vollst√§ndig kompatibel_")

    if st.session_state.selected_values:
        cols = st.columns([1, 3, 3])
        cols[1].markdown(f"**Option A: {st.session_state.options[0]}**")
        cols[2].markdown(f"**Option B: {st.session_state.options[1]}**")

        for value in st.session_state.selected_values:
            st.markdown("---")
            col_val, col_rate_a, col_rate_b = st.columns([1, 3, 3])
            
            # Rating for Option A
            rating_a_key = f"{value}_A"
            initial_rating_a = st.session_state.values_rating.get(rating_a_key, 5)
            new_rating_a = col_rate_a.slider(
                f"**{value}**", 
                1, 10, initial_rating_a, key=rating_a_key, label_visibility="collapsed"
            )
            st.session_state.values_rating[rating_a_key] = new_rating_a
            
            # Rating for Option B
            rating_b_key = f"{value}_B"
            initial_rating_b = st.session_state.values_rating.get(rating_b_key, 5)
            new_rating_b = col_rate_b.slider(
                f"**{value}**", 
                1, 10, initial_rating_b, key=rating_b_key, label_visibility="collapsed"
            )
            st.session_state.values_rating[rating_b_key] = new_rating_b
            
            # Value label
            col_val.write(f"**{value}**")

    st.markdown("---")
    
    # KORRIGIERTE LOGIK AUS DEINEM SNIPPET
    if st.button("Weiter"):
        if not st.session_state.selected_values:
            st.warning("Bitte w√§hle mindestens einen Wert aus, bevor du fortf√§hrst.")
        else:
            next_page('step_3')
    # ENDE KORRIGIERTE LOGIK


def render_step_3():
    st.title("Step 3: Emotionen & Denkfehler (Der 'Rote Hut')")
    with st.container():
        st.markdown("#### Dein Bauchgef√ºhl")
        st.markdown("Schreibe auf, welche Gef√ºhle und intuitiven Gedanken du zu den Optionen hast. Es geht nicht um Logik, sondern um Emotionen.")
        st.session_state.emotions = st.text_area(
            "Deine Gedanken:", 
            value=st.session_state.emotions, 
            height=150, 
            key="emotions_area"
        )
    
    selected_content = category_content.get(st.session_state.problem_category, {})
    biases = selected_content.get("cognitive_biases", {}).get("biases", [])
    
    if biases:
        with st.container():
            st.markdown("#### Reflektiere √ºber Denkfehler")
            st.markdown("Versuche, m√∂gliche kognitive Verzerrungen zu identifizieren, die deine emotionale Bewertung beeinflussen k√∂nnten.")
            for bias_title, bias_question in biases:
                with st.expander(f"**{bias_title}**"):
                    st.markdown(bias_question)

    st.markdown("---")
    if st.button("Weiter"):
        next_page('step_4')


def render_step_4():
    st.title("Step 4: Pro/Contra & Zukunft")
    
    with st.container():
        st.markdown(f"#### Vorteile (Der 'Gelbe Hut')")
        st.session_state.pro_a = st.text_area(
            f"Was spricht f√ºr Option A: '{st.session_state.options[0]}'? (Maximales Positives Denken)",
            value=st.session_state.pro_a,
            key="pro_a_area", height=100
        )
        st.session_state.pro_b = st.text_area(
            f"Was spricht f√ºr Option B: '{st.session_state.options[1]}'? (Maximales Positives Denken)",
            value=st.session_state.pro_b,
            key="pro_b_area", height=100
        )
    
    st.markdown("---")
    with st.container():
        st.markdown(f"#### Nachteile (Der 'Schwarze Hut')")
        st.session_state.contra_a = st.text_area(
            f"Was spricht gegen Option A: '{st.session_state.options[0]}'? (Worst-Case-Szenario & Risiken)",
            value=st.session_state.contra_a,
            key="contra_a_area", height=100
        )
        st.session_state.contra_b = st.text_area(
            f"Was spricht gegen Option B: '{st.session_state.options[1]}'? (Worst-Case-Szenario & Risiken)",
            value=st.session_state.contra_b,
            key="contra_b_area", height=100
        )
        
    st.markdown("---")
    with st.container():
        st.markdown("#### Kreative Optionen (Der 'Gr√ºne Hut')")
        st.markdown("Gibt es noch andere, unkonventionelle Optionen, die du bisher nicht in Betracht gezogen hast? (z.B. Kombinationen, Aufschieben, Dritte Option).")
        st.session_state.creative_options = st.text_area(
            "Andere Ideen:",
            value=st.session_state.creative_options,
            key="creative_options_area", height=100
        )

    st.markdown("---")
    with st.container():
        st.markdown(f"#### Zukunftsszenario (Regret Minimization Framework)")
        st.markdown("Stelle dir vor, du bist **80 Jahre alt**. Welche Entscheidung w√ºrdest du am meisten bereuen, **nicht** getroffen zu haben? Betrachte die langfristigen Auswirkungen.")
        st.session_state.future_scenario_a = st.text_area(
            f"Wie sieht dein Leben in 1, 3 und 5 Jahren aus, wenn du dich f√ºr Option A entscheidest?",
            value=st.session_state.future_scenario_a,
            key="scenario_a", height=150
        )
        st.session_state.future_scenario_b = st.text_area(
            f"Wie sieht dein Leben in 1, 3 und 5 Jahren aus, wenn du dich f√ºr Option B entscheidest?",
            value=st.session_state.future_scenario_b,
            key="scenario_b", height=150
        )

    st.markdown("---")
    if st.button("Weiter"):
        next_page('step_5')

def render_step_5():
    st.title("Step 5: Zusammenfassung & Abschluss (Der 'Blaue Hut')")
    
    with st.container():
        st.markdown("#### √úbersicht")
        st.subheader("Deine Entscheidungssituation:")
        st.info(st.session_state.problem)
        st.subheader("Deine Optionen:")
        st.write(f"**Option A:** {st.session_state.options[0]}")
        st.write(f"**Option B:** {st.session_state.options[1]}")

    st.markdown("---")
    if st.session_state.selected_values:
        with st.container():
            st.markdown("#### Quantitative Auswertung (Werte-Matrix):")
            data = []
            score_a = 0
            score_b = 0
            for value in st.session_state.selected_values:
                # Sicherstellen, dass die Keys existieren, um Fehler zu vermeiden
                rating_a = st.session_state.values_rating.get(f"{value}_A", 0)
                rating_b = st.session_state.values_rating.get(f"{value}_B", 0)
                score_a += rating_a
                score_b += rating_b
                data.append({
                    "Wert": value,
                    "Option": st.session_state.options[0],
                    "Bewertung (1-10)": rating_a
                })
                data.append({
                    "Wert": value,
                    "Option": st.session_state.options[1],
                    "Bewertung (1-10)": rating_b
                })
            
            df = pd.DataFrame(data)
            
            st.write(f"**Gesamtpunktzahl Option A ({st.session_state.options[0]}):** **{score_a}**")
            st.write(f"**Gesamtpunktzahl Option B ({st.session_state.options[1]}):** **{score_b}**")

            if not df.empty:
                chart = alt.Chart(df).mark_bar(opacity=0.8, size=15).encode(
                    x=alt.X('Wert', title='Werte', axis=None),
                    y=alt.Y('Bewertung (1-10)', title='Kompatibilit√§tsscore (1-10)'),
                    color=alt.Color('Option', legend=alt.Legend(title="Option")),
                    column=alt.Column('Option', header=alt.Header(titleOrient="bottom", labelOrient="bottom")),
                    tooltip=['Wert', 'Option', 'Bewertung (1-10)']
                ).properties(
                    title="Werte-Bewertung im Vergleich"
                ).configure_header(
                    titleFontSize=16,
                    labelFontSize=14
                )
                
                st.altair_chart(chart, use_container_width=True)

    st.markdown("---")
    with st.container():
        st.markdown("#### Qualitative Analyse:")
        
        st.markdown("##### Emotionen & Bauchgef√ºhl:")
        st.info(st.session_state.emotions if st.session_state.emotions else "_Keine Emotionen eingetragen._")
        
        col_summary_a, col_summary_b = st.columns(2)
        
        with col_summary_a:
            st.markdown(f"##### Pro/Contra f√ºr Option A: {st.session_state.options[0]}")
            st.markdown("**Vorteile:**")
            st.write(st.session_state.pro_a if st.session_state.pro_a else "_Keine Vorteile eingetragen._")
            st.markdown("**Nachteile/Risiken:**")
            st.write(st.session_state.contra_a if st.session_state.contra_a else "_Keine Nachteile eingetragen._")
        
        with col_summary_b:
            st.markdown(f"##### Pro/Contra f√ºr Option B: {st.session_state.options[1]}")
            st.markdown("**Vorteile:**")
            st.write(st.session_state.pro_b if st.session_state.pro_b else "_Keine Vorteile eingetragen._")
            st.markdown("**Nachteile/Risiken:**")
            st.write(st.session_state.contra_b if st.session_state.contra_b else "_Keine Nachteile eingetragen._")

        st.markdown("---")
        st.markdown("##### Zukunftsszenarien (Regret Minimization):")
        st.write(f"**Szenario A:** {st.session_state.future_scenario_a if st.session_state.future_scenario_a else '_Kein Szenario eingetragen._'}")
        st.write(f"**Szenario B:** {st.session_state.future_scenario_b if st.session_state.future_scenario_b else '_Kein Szenario eingetragen._'}")

        if st.session_state.creative_options:
            st.markdown("##### Weitere Ideen (Gr√ºner Hut)")
            st.write(st.session_state.creative_options)
    
    st.markdown("---")
    with st.container():
        st.markdown("#### Dein erster konkreter Schritt")
        st.markdown("""
        Nutze die **SMART-Methode**, um deinen ersten Schritt zu planen: **S**pezifisch, **M**essbar, **A**ttraktiv, **R**ealistisch, **T**erminiert.
        """)
        st.session_state.first_step = st.text_area(
            "Dein erster konkreter SMART-Schritt:",
            value=st.session_state.first_step,
            key="final_step_area"
        )
        
        st.markdown("---")
        if st.button("üéâ Entscheidung abschlie√üen und speichern", use_container_width=True):
            st.success("Deine Entscheidungsreise wurde abgeschlossen! Du hast nun eine klare Basis f√ºr deine n√§chsten Schritte.")
        
    st.button("Neue Entscheidungsreise starten", on_click=reset_app)


def render_resilience_questions_page():
    st.title("Resilienz-Fragebogen")
    st.warning("Disclaimer: Dieses Tool dient der Selbsterkenntnis und ersetzt keine professionelle psychologische Beratung.")
    st.markdown("Bewerte auf einer Skala von **1 (stimme gar nicht zu)** bis **5 (stimme voll und ganz zu)**, wie sehr die folgenden Aussagen auf dich zutreffen.")

    for i, question in enumerate(resilience_questions):
        st.session_state.resilience_answers[i] = st.slider(
            question,
            1, 5, st.session_state.resilience_answers.get(i, 3), key=f"resilience_q_{i}"
        )
    
    st.markdown("---")
    if st.button("Fragebogen abschlie√üen", use_container_width=True):
        # Berechne den Score vor dem Seitenwechsel
        total_score = sum(st.session_state.resilience_answers.values())
        st.session_state.resilience_score = total_score
        st.session_state.resilience_analysis = get_canned_analysis(total_score, len(resilience_questions) * 5)
        next_page('resilience_results')


def render_resilience_results_page():
    st.title("Deine Resilienz-Analyse")
    st.warning("Disclaimer: Dieser Fragebogen ist ein nicht-klinisches Werkzeug zur Selbsterkenntnis und ersetzt keine professionelle psychologische Beratung.")
    
    if st.session_state.resilience_score is None:
        st.warning("Bitte f√ºlle zuerst den Fragebogen aus.")
        if st.button("Zum Fragebogen zur√ºckkehren"):
            next_page('resilience_questions')
        return

    total_score = st.session_state.resilience_score
    max_score = len(resilience_questions) * 5
    st.markdown(f"**Deine Gesamtpunktzahl:** **{total_score}** von **{max_score}**")
    
    if st.session_state.resilience_analysis:
        st.markdown(st.session_state.resilience_analysis, unsafe_allow_html=True)
        
    st.markdown("---")
    st.markdown("#### Empfohlene n√§chste Schritte")
    st.markdown("""
    * **Tagebuch f√ºhren:** Schreibe t√§glich drei Dinge auf, die gut gelaufen sind.
    * **Achtsamkeit:** Probiere eine 5-min√ºtige Meditations√ºbung aus.
    * **Soziale Kontakte:** Triff dich diese Woche bewusst mit einer unterst√ºtzenden Person.
    """)

    if st.button("Neue Reflexion starten oder zur Home-Seite"):
        next_page('start')


def render_bottom_nav():
    """Rendert die feste Navigationsleiste am unteren Bildschirmrand."""
    # Definiere die aktiven Seiten f√ºr jede Hauptkategorie
    is_decide_active = st.session_state.page in ['step_1', 'step_2', 'step_3', 'step_4', 'step_5']
    is_reflect_active = st.session_state.page in ['resilience_questions', 'resilience_results']
    is_start_active = st.session_state.page == 'start'
    
    # Der Grow-Pfad existiert in diesem Code nicht, wird aber f√ºr die Navigation beibehalten.
    is_grow_active = False 
    
    nav_html = f"""
    <div class="bottom-nav">
        <a href="javascript:void(0);" onclick="Streamlit.set
        ComponentValue('page', 'start')" class="nav-item {'active' if is_start_active else ''}">
            <span class="icon">üè†</span> Home
        </a>
        <a href="javascript:void(0);" onclick="Streamlit.set
        ComponentValue('page', 'step_1')" class="nav-item {'active' if is_decide_active else ''}">
            <span class="icon">üß†</span> Entscheiden
        </a>
        <a href="javascript:void(0);" onclick="Streamlit.set
        ComponentValue('page', 'resilience_questions')" class="nav-item {'active' if is_reflect_active else ''}">
            <span class="icon">üßò</span> Reflektieren
        </a>
        <a href="javascript:void(0);" class="nav-item {'active' if is_grow_active else ''}">
            <span class="icon">üå±</span> Wachstum
        </a>
    </div>
    """
    st.markdown(nav_html, unsafe_allow_html=True)


# --- MAIN APP LOGIC ---

def main():
    st.set_page_config(
        page_title="Entscheidungshelfer",
        layout="wide",
        initial_sidebar_state="collapsed"
    )
    
    initialize_session_state()

    # Custom CSS f√ºr Styling und Bottom Navigation
    st.markdown(
        """
        <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap');
        
        * {
            font-family: 'Inter', sans-serif;
        }

        /* Haupt-Button-Styling */
        .stButton>button {
            border-radius: 8px;
            border: 1px solid #4CAF50;
            color: #1E8449; /* Dunkleres Gr√ºn */
            background-color: #E9F7EF; /* Sehr helles Gr√ºn */
            padding: 10px 24px;
            font-weight: bold;
            transition: all 0.2s ease-in-out;
        }
        .stButton>button:hover {
            background-color: #D6EADF; /* Leicht dunkleres Hover */
            color: #145A32;
        }
        
        /* √úberschriften-Farbe */
        .stTitle, .stSubheader {
            color: #1E8449;
        }
        
        /* Bottom Navigation Bar Styles */
        .bottom-nav {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            display: flex;
            justify-content: space-around;
            padding: 10px 0;
            background-color: #f7f9fc;
            box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
            z-index: 1000;
        }
        .nav-item {
            text-decoration: none;
            color: #333;
            font-size: 14px;
            font-weight: 500;
            padding: 8px 15px;
            border-radius: 50px;
            transition: background-color 0.3s, color 0.3s;
            display: flex;
            align-items: center;
            gap: 5px;
            cursor: pointer; /* Wichtig f√ºr Streamlit.setComponentValue */
        }
        .nav-item:hover {
            background-color: #e0e6ef;
        }
        .nav-item.active {
            background-color: #4CAF50;
            color: white;
            font-weight: bold;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .icon {
            font-size: 1.2em;
        }

        /* Haupt-Content-Bereich anpassen */
        .main {
            padding-bottom: 70px; /* Platz f√ºr die Bottom Nav Bar */
        }
        
        </style>
        """,
        unsafe_allow_html=True
    )
    
    # Seiten-Dispatcher
    page = st.session_state.page
    
    if page == 'start':
        render_start()
    elif page == 'step_1':
        render_step_1()
    elif page == 'step_2':
        render_step_2()
    elif page == 'step_3':
        render_step_3()
    elif page == 'step_4':
        render_step_4()
    elif page == 'step_5':
        render_step_5()
    elif page == 'resilience_questions':
        render_resilience_questions_page()
    elif page == 'resilience_results':
        render_resilience_results_page()
        
    # Navigation nur auf den Hauptschritten anzeigen
    if page in ['step_1', 'step_2', 'step_3', 'step_4', 'step_5']:
        render_bottom_nav()

if __name__ == '__main__':
    main()


import streamlit as st

# --- MAIN APP LOGIC ---

def main():
    # 1. Session State initialisieren
    # Setzt die Startseite, falls 'page' noch nicht im Session State existiert.
    if 'page' not in st.session_state:
        st.session_state.page = 'start'

    # 2. Query Parameter auslesen und Session State √ºberschreiben
    query_params = st.query_params
    if 'page' in query_params:
        # Aktualisiert den Zustand basierend auf dem ersten Wert des Query-Parameters
        st.session_state.page = query_params['page'][0]

    # 3. Routing-Map: Seitenname auf die zugeh√∂rige Render-Funktion mappen
    # Dies ersetzt die lange elif-Kette.
    page_routes = {
        'start': render_start_page,
        'step_1': render_step_1,
        'step_2': render_step_2,
        'step_3': render_step_3,
        'step_4': render_step_4,
        'step_5': render_step_5,
        'wert_reflexion': render_resilience_questions_page,
        'resilience_results': render_resilience_results_page,
        'resilience_path_selection': render_resilience_path_selection,
        'resilience_path_day': render_resilience_path_day,
        'trophy_gallery': render_trophy_gallery,
    }

    # 4. Aktuelle Seite rendern
    current_page = st.session_state.page
    
    if current_page in page_routes:
        # Ruft die im Dictionary hinterlegte Funktion auf
        page_routes[current_page]()
    else:
        # Fallback-Mechanismus, falls eine unbekannte Seite aufgerufen wird
        st.error(f"Fehler: Seite '{current_page}' nicht gefunden. Zur√ºck zur Startseite.")
        st.session_state.page = 'start'
        page_routes['start']()

    # 5. Bottom Navigation rendern
    # Die Logik bleibt: render_bottom_nav() nur anzeigen, wenn es nicht die Startseite ist.
    if st.session_state.page != 'start':
        render_bottom_nav()

# HINWEIS: Die Funktionen (z.B. render_start_page) m√ºssen in Ihrem vollst√§ndigen
# Streamlit-Skript an dieser Stelle definiert oder importiert werden.

if __name__ == "__main__":
    main()
